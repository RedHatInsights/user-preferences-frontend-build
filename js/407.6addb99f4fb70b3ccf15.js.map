{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/SmartComponents/FormComponents/descriptiveCheckbox.scss","webpack://insights-frontend-starter-app/./src/PresentationalComponents/shared/FormButtons.js","webpack://insights-frontend-starter-app/./src/PresentationalComponents/shared/useCurrentUser.js","webpack://insights-frontend-starter-app/./src/PresentationalComponents/shared/YourInformation.js","webpack://insights-frontend-starter-app/./src/PresentationalComponents/shared/useLoaded.js","webpack://insights-frontend-starter-app/./src/SmartComponents/FormComponents/DescriptiveCheckbox.js","webpack://insights-frontend-starter-app/./src/SmartComponents/FormComponents/Loader.js","webpack://insights-frontend-starter-app/./src/SmartComponents/FormComponents/DataListLayout.js","webpack://insights-frontend-starter-app/./src/SmartComponents/FormComponents/componentTypes.js","webpack://insights-frontend-starter-app/./src/api.js","webpack://insights-frontend-starter-app/./src/actions.js","webpack://insights-frontend-starter-app/./src/SmartComponents/FormComponents/descriptiveCheckbox.scss?e74f"],"names":["___CSS_LOADER_EXPORT___","push","module","id","FormButtons","dirtyFieldsSinceLastSubmit","submitSucceeded","pristine","reset","useFormApi","noChanges","ActionGroup","Button","className","type","ouiaId","isDisabled","variant","onClick","propTypes","PropTypes","formProps","subscription","props","personalInfoUrl","insights","chrome","isProd","useState","currentUser","setCurrentUser","isLoaded","useLoaded","auth","getUser","identity","user","useCurrentUser","Card","CardHeader","TextContent","Text","component","TextVariants","CardBody","DataList","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","isFilled","key","Fragment","email","rel","target","href","Skeleton","size","loader","setLoaded","useEffect","DescriptiveCheckbox","useFieldApi","label","title","description","isDanger","isGlobal","input","onChange","formOptions","Checkbox","isChecked","checked","name","batch","getRegisteredFields","forEach","field","getFieldState","value","change","data-type","classNames","FieldProvider","defaultProps","Loader","rest","validate","FormSpyProvider","DataListRow","hasError","_error","info","this","setState","fieldsKey","fields","state","renderForm","Component","DataListLayout","sections","aria-label","map","actualFields","Array","isArray","length","aria-labelledby","fieldsToRender","DESCRIPTIVE_CHECKBOX","LOADER","DATA_LIST","instance","response","config","data","JSON","parse","_e","getApplicationSchema","application","apiVersion","resourceType","url","saveValues","values","notificationConfigForBundle","bundleName","getNotificationSchema","ACTION_TYPES","payload","meta","notifications","rejected","saveNotificationValues","save","noError","getEmailSchema","schema","apiName","appName","saveEmailValues","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/407.6addb99f4fb70b3ccf15.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".user-preferences .pref-c-descriptive-checkbox span{display:block}.user-preferences .pref-c-descriptive-checkbox input.pf-c-check__input{align-self:start;margin-top:var(--pf-global--spacer--xs)}.user-preferences .pref-c-descriptive-checkbox .pref-c-checkbox-label{font-weight:var(--pf-global--FontWeight--bold)}.user-preferences .pref-c-descriptive-checkbox .pref-c-checkbox-label-error{color:var(--pf-global--danger-color--200)}.user-preferences .pref-c-descriptive-checkbox .pref-c-checkbox-description{font-size:var(--pf-global--FontSize--md);color:var(--pf-global--Color--100)}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/SmartComponents/FormComponents/descriptiveCheckbox.scss\"],\"names\":[],\"mappings\":\"AAAA,oDACkC,aAAa,CAD/C,uEACqG,gBAAgB,CAAC,uCAAuC,CAD7J,sEACkN,8CAA8C,CADhQ,4EAC2T,yCAAyC,CADpW,4EAC+Z,wCAAwC,CAAC,kCAAkC\",\"sourcesContent\":[\".user-preferences{\\n.pref-c-descriptive-checkbox span{display:block}.pref-c-descriptive-checkbox input.pf-c-check__input{align-self:start;margin-top:var(--pf-global--spacer--xs)}.pref-c-descriptive-checkbox .pref-c-checkbox-label{font-weight:var(--pf-global--FontWeight--bold)}.pref-c-descriptive-checkbox .pref-c-checkbox-label-error{color:var(--pf-global--danger-color--200)}.pref-c-descriptive-checkbox .pref-c-checkbox-description{font-size:var(--pf-global--FontSize--md);color:var(--pf-global--Color--100)}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import React from 'react';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport FormSpy from '@data-driven-forms/react-form-renderer/form-spy';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { isEmpty } from 'lodash';\nimport { ActionGroup } from '@patternfly/react-core';\n\nconst FormButtons = ({\n  dirtyFieldsSinceLastSubmit,\n  submitSucceeded,\n  pristine,\n}) => {\n  const { reset } = useFormApi();\n  const noChanges =\n    isEmpty(dirtyFieldsSinceLastSubmit) || (!submitSucceeded && pristine);\n  return (\n    <ActionGroup>\n      <Button\n        className=\"pref-email__form-button\"\n        type=\"submit\"\n        ouiaId=\"user-pref-primary-button\"\n        isDisabled={noChanges}\n        variant=\"primary\"\n      >\n        Save\n      </Button>\n      <Button\n        variant=\"link\"\n        ouiaId=\"user-pref-reset-button\"\n        isDisabled={noChanges}\n        onClick={() => reset()}\n      >\n        Cancel\n      </Button>\n    </ActionGroup>\n  );\n};\n\nFormButtons.propTypes = {\n  dirtyFieldsSinceLastSubmit: PropTypes.arrayOf(\n    PropTypes.shape({\n      [PropTypes.string]: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.bool,\n      ]),\n    })\n  ),\n  submitSucceeded: PropTypes.bool,\n  pristine: PropTypes.bool,\n};\n\nconst FormButtonWithSpies = (formProps) => (\n  <FormSpy\n    subscription={{\n      pristine: true,\n      submitSucceeded: true,\n      dirtyFieldsSinceLastSubmit: true,\n    }}\n  >\n    {(props) => <FormButtons {...props} {...formProps} />}\n  </FormSpy>\n);\n\nexport default FormButtonWithSpies;\n","import { useState } from 'react';\nimport useLoaded from './useLoaded';\n\nconst useCurrentUser = () => {\n  const [currentUser, setCurrentUser] = useState({});\n\n  const isLoaded = useLoaded(async () => {\n    const { identity } = await insights.chrome.auth.getUser();\n    setCurrentUser(identity.user);\n  });\n\n  return {\n    isLoaded,\n    currentUser,\n  };\n};\n\nexport default useCurrentUser;\n","import {\n  Card,\n  CardBody,\n  CardHeader,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React, { Fragment } from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport useCurrentUser from './useCurrentUser';\n\nconst YourInformation = () => {\n  const personalInfoUrl = `https://www.${\n    insights.chrome.isProd ? '' : 'qa.'\n  }redhat.com/wapps/ugc/protected/emailChange.html`;\n\n  const { isLoaded, currentUser } = useCurrentUser();\n\n  return (\n    <Card className=\"pref-email__info\" ouiaId=\"user-pref-info-card\">\n      <CardHeader>\n        <TextContent>\n          <Text component={TextVariants.h2}>Your information</Text>\n        </TextContent>\n      </CardHeader>\n      <CardBody>\n        <DataList>\n          <DataListItem>\n            <DataListItemRow>\n              <DataListItemCells\n                className=\"pref-u-condensed\"\n                dataListCells={[\n                  <DataListCell\n                    isFilled={false}\n                    className=\"pref-c-title pref-u-bold pref-u-condensed\"\n                    key=\"email-title\"\n                  >\n                    Email address\n                  </DataListCell>,\n                  <DataListCell\n                    isFilled\n                    key=\"email-value\"\n                    className=\"pref-email__info-user-email pref-u-condensed\"\n                  >\n                    {isLoaded ? (\n                      <Fragment>\n                        <span>{currentUser.email}</span>\n                        <a\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                          href={personalInfoUrl}\n                        >\n                          Not correct?\n                        </a>\n                      </Fragment>\n                    ) : (\n                      <Skeleton size=\"lg\" />\n                    )}\n                  </DataListCell>,\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        </DataList>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default YourInformation;\n","import { useEffect, useState } from 'react';\n\nconst useLoaded = (loader) => {\n  const [isLoaded, setLoaded] = useState(false);\n  useEffect(() => {\n    (async () => {\n      await loader();\n      setLoaded(true);\n    })();\n  }, []);\n\n  return isLoaded;\n};\n\nexport default useLoaded;\n","import React from 'react';\nimport { Checkbox } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport './descriptiveCheckbox.scss';\n\n// eslint-disable-next-line no-unused-vars\nconst DescriptiveCheckbox = (props) => {\n  const {\n    label,\n    title,\n    description,\n    isDanger,\n    isGlobal,\n    input: { onChange, ...input },\n  } = useFieldApi({\n    ...props,\n    type: 'checkbox',\n  });\n  const formOptions = useFormApi();\n  return (\n    <Checkbox\n      {...input}\n      isChecked={input.checked}\n      id={`descriptive-checkbox-${input.name}`}\n      onChange={(...props) => {\n        if (isGlobal) {\n          formOptions.batch(() => {\n            formOptions.getRegisteredFields().forEach((field) => {\n              if (typeof formOptions.getFieldState(field).value === 'boolean') {\n                formOptions.change(field, false);\n              }\n            });\n          });\n        } else {\n          formOptions.change('unsubscribe.from-all', false);\n        }\n\n        onChange(...props);\n      }}\n      data-type=\"descriptive-checkbox\"\n      className=\"pref-c-descriptive-checkbox\"\n      label={\n        <span\n          className={classNames('pref-c-checkbox-label', {\n            'pref-c-checkbox-label-error': isDanger || isGlobal,\n          })}\n        >\n          {label || title}\n        </span>\n      }\n      {...(description && {\n        description: (\n          <span className=\"pref-c-checkbox-description\">{description}</span>\n        ),\n      })}\n    />\n  );\n};\n\nDescriptiveCheckbox.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  name: PropTypes.string,\n  label: PropTypes.string,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  isDanger: PropTypes.bool,\n  isGlobal: PropTypes.bool,\n};\n\nDescriptiveCheckbox.defaultProps = {\n  name: '',\n  label: '',\n  isDanger: false,\n};\n\nexport default DescriptiveCheckbox;\n","import React from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport PropTypes from 'prop-types';\n\nconst Loader = ({\n  name,\n  size,\n  FieldProvider,\n  validate,\n  FormSpyProvider,\n  formOptions,\n  ...rest\n}) => (\n  <div {...rest}>\n    <Skeleton size={size}></Skeleton>\n  </div>\n);\n\nLoader.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n  validate: PropTypes.any,\n  name: PropTypes.string,\n  size: PropTypes.string,\n};\n\nLoader.defaultProps = {\n  name: '',\n  size: 'md',\n};\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport {\n  DataList,\n  DataListItem,\n  DataListItemRow,\n  DataListItemCells,\n  DataListCell,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nclass DataListRow extends Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch(_error, info) {\n    this.setState({ hasError: info });\n  }\n\n  render() {\n    const { fieldsKey, label, fields, formOptions } = this.props;\n    const { hasError } = this.state;\n    return (\n      <DataListItemRow>\n        <DataListItemCells\n          dataListCells={[\n            <DataListCell\n              isFilled={false}\n              className=\"pref-c-title pref-u-bold\"\n              key={`${fieldsKey}-title`}\n            >\n              {fieldsKey === 0 ? label : ''}\n            </DataListCell>,\n            <DataListCell isFilled key={`${fieldsKey}-content`}>\n              {hasError\n                ? 'Error while mapping fields, please check your schema if it has valid component types'\n                : formOptions?.renderForm(fields, formOptions)}\n            </DataListCell>,\n          ]}\n        />\n      </DataListItemRow>\n    );\n  }\n}\n\nDataListRow.propTypes = {\n  fieldsKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fields: PropTypes.array,\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  validate: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n};\n\n// eslint-disable-next-line no-unused-vars\nconst DataListLayout = (props) => {\n  const { sections, label, name } = useFieldApi(props);\n  const formOptions = useFormApi();\n  return (\n    <DataList aria-label={label || name} {...props}>\n      {sections.map(({ label, fields }, key) => {\n        const actualFields = Array.isArray(fields) ? fields : [fields];\n        return (\n          actualFields.length > 0 && (\n            <DataListItem name={name} key={key} aria-labelledby=\"simple-item1\">\n              {actualFields.map(({ fields: fieldsToRender }, fieldsKey) => (\n                <DataListRow\n                  key={`${key}-${fieldsKey}`}\n                  fieldsKey={fieldsKey}\n                  label={label}\n                  fields={fieldsToRender}\n                  formOptions={formOptions}\n                />\n              ))}\n            </DataListItem>\n          )\n        );\n      })}\n    </DataList>\n  );\n};\n\nDataListLayout.propTypes = {\n  sections: PropTypes.array,\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  validate: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n};\n\nexport default DataListLayout;\n","export const DESCRIPTIVE_CHECKBOX = 'descriptiveCheckbox';\nexport const LOADER = 'loader';\nexport const DATA_LIST = 'section';\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nexport { instance };\n\ninstance.interceptors.response.use((response) => {\n  if (response?.config?.data) {\n    try {\n      return JSON.parse(response.config.data);\n    } catch (_e) {\n      return response.config.data;\n    }\n  }\n\n  return response;\n});\n\nexport const getApplicationSchema = (\n  application,\n  apiVersion = 'v1',\n  resourceType = '',\n  url\n) =>\n  instance.get(\n    `/api/${application}/${apiVersion}${url || `/user-config/${resourceType}`}`\n  );\n\nexport const saveValues = async (\n  application,\n  values,\n  apiVersion = 'v1',\n  resourceType = '',\n  url\n) =>\n  instance.post(\n    `/api/${application}/${apiVersion}${url || `/user-config/${resourceType}`}`,\n    values\n  );\n","import { getApplicationSchema, saveValues as save } from './api';\nimport { ACTION_TYPES } from './constants';\nimport config from './config/config.json';\n\nconst notificationConfigForBundle = (bundleName) =>\n  config['notification-preference']?.[bundleName];\n\nexport const getNotificationSchema = ({ bundleName, apiVersion }) => ({\n  type: ACTION_TYPES.GET_NOTIFICATION_SCHEMA,\n  payload: getApplicationSchema(\n    notificationConfigForBundle(bundleName)?.application,\n    apiVersion,\n    notificationConfigForBundle(bundleName)?.resourceType\n  ),\n  meta: {\n    bundleName,\n    notifications: {\n      rejected: {\n        variant: 'danger',\n        title: \"Request for user's configuration failed\",\n        description: `User's configuration notification for this bundle does not exist.`,\n      },\n    },\n  },\n});\n\nexport const saveNotificationValues = ({ bundleName, values, apiVersion }) => ({\n  type: ACTION_TYPES.SAVE_NOTIFICATION_SCHEMA,\n  payload: save(\n    notificationConfigForBundle(bundleName)?.application,\n    values,\n    apiVersion,\n    notificationConfigForBundle(bundleName)?.resourceType\n  ),\n  meta: {\n    bundleName: bundleName,\n    noError: true,\n  },\n});\n\nexport const getEmailSchema = ({\n  application,\n  apiVersion,\n  resourceType = 'email-preference',\n  schema,\n  url,\n  apiName,\n}) => ({\n  type: ACTION_TYPES.GET_EMAIL_SCHEMA,\n  payload:\n    schema ||\n    getApplicationSchema(apiName || application, apiVersion, resourceType, url),\n  meta: {\n    appName: application,\n    notifications: {\n      rejected: {\n        variant: 'danger',\n        title: \"Request for user's configuration failed\",\n        description: `User's configuration email for ${config['email-preference']?.[application]?.title} application does not exist.`,\n      },\n    },\n  },\n});\n\nexport const saveEmailValues = ({\n  application,\n  values,\n  apiVersion,\n  resourceType = 'email-preference',\n  url,\n  apiName,\n}) => ({\n  type: ACTION_TYPES.SAVE_EMAIL_SCHEMA,\n  payload: save(apiName || application, values, apiVersion, resourceType, url),\n  meta: {\n    appName: application,\n    title: config['email-preference']?.[application]?.title,\n    noError: true,\n  },\n});\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./descriptiveCheckbox.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./descriptiveCheckbox.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}