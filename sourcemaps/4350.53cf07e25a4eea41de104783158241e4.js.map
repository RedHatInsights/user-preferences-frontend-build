{"version":3,"file":"js/4350.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/api.js","webpack:///./src/redux/actions/notifications-actions.js","webpack:///./src/redux/actions/email-actions.js","webpack:///./src/SmartComponents/FormComponents/DescriptiveCheckbox.js","webpack:///./src/SmartComponents/FormComponents/Loader.js","webpack:///./src/SmartComponents/FormComponents/DataListLayout.js","webpack:///./src/SmartComponents/FormComponents/BulkSelectButton.js","webpack:///./src/SmartComponents/FormComponents/InputGroup.js","webpack:///./src/SmartComponents/FormComponents/componentTypes.js","webpack:///./src/Utilities/functions.js","webpack:///./src/PresentationalComponents/Notifications/urlSync.js","webpack:///./src/PresentationalComponents/Notifications/TabsMenu.js","webpack:///./src/PresentationalComponents/Notifications/Tabs.js","webpack:///./src/PresentationalComponents/Notifications/TabGroup.js","webpack:///./src/PresentationalComponents/Notifications/utils.js","webpack:///./src/PresentationalComponents/shared/FormButtons.js","webpack:///./src/PresentationalComponents/Notifications/NotificationTemplate.js","webpack:///./src/PresentationalComponents/Notifications/Notifications.js","webpack:///./src/config/ lazy ^\\.\\/.*$ namespace object"],"sourcesContent":["import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nexport { instance };\n\ninstance.interceptors.response.use((response) => {\n  if (response?.config?.data) {\n    try {\n      return JSON.parse(response.config.data);\n    } catch (_e) {\n      return response.config.data;\n    }\n  }\n\n  return response;\n});\n\nexport const getApplicationSchema = (\n  application,\n  apiVersion = 'v1',\n  resourceType = '',\n  url\n) =>\n  instance.get(\n    `/api/${application}/${apiVersion}${url || `/user-config/${resourceType}`}`\n  );\n\nexport const getNotificationsSchema = (apiVersion = 'v1') =>\n  instance.get(\n    `/api/notifications/${apiVersion}/user-config/notification-event-type-preference`\n  );\n\nexport const saveValues = async (apiName, values, apiVersion = 'v1', url) =>\n  instance.post(\n    `/api/${apiName}/${apiVersion}${\n      url || '/user-config/notification-event-type-preference'\n    }`,\n    values\n  );\n","import {\n  getNotificationsSchema as getSchema,\n  saveValues as save,\n} from '../../api';\nimport { ACTION_TYPES } from '../action-types';\n\nexport const getNotificationsSchema = (props) => ({\n  type: ACTION_TYPES.GET_NOTIFICATIONS_SCHEMA,\n  payload: getSchema(props),\n  meta: {\n    notifications: {\n      rejected: {\n        variant: 'danger',\n        title: \"Request for user's configuration failed\",\n        description: `User's configuration notification for this bundle does not exist.`,\n      },\n    },\n  },\n});\n\nexport const saveNotificationValues = (values, apiVersion) => ({\n  type: ACTION_TYPES.SAVE_NOTIFICATION_SCHEMA,\n  payload: save('notifications', values, apiVersion),\n});\n","import { getApplicationSchema, saveValues as save } from '../../api';\nimport { ACTION_TYPES } from '../action-types';\n\nexport const getEmailSchema = ({\n  application,\n  apiVersion,\n  resourceType = 'email-preference',\n  schema,\n  url,\n  apiName,\n}) => ({\n  type: ACTION_TYPES.GET_EMAIL_SCHEMA,\n  payload:\n    schema ||\n    getApplicationSchema(apiName || application, apiVersion, resourceType, url),\n  meta: {\n    appName: application,\n    notifications: {\n      rejected: {\n        variant: 'danger',\n        title: \"Request for user's configuration failed\",\n        description: `User's configuration email for ${application?.label} application does not exist.`,\n      },\n    },\n  },\n});\n\nexport const saveEmailValues = ({\n  application,\n  values,\n  apiVersion,\n  url,\n  apiName,\n}) => ({\n  type: ACTION_TYPES.SAVE_EMAIL_SCHEMA,\n  payload: save(apiName || application, values, apiVersion, url),\n  meta: {\n    appName: application,\n    title: application?.label,\n  },\n});\n","import React from 'react';\nimport { Checkbox } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport './descriptiveCheckbox.scss';\nimport {\n  ExclamationTriangleIcon,\n  InfoCircleIcon,\n} from '@patternfly/react-icons';\n\nconst DescriptiveCheckbox = (props) => {\n  const {\n    label,\n    title,\n    description,\n    checkedWarning,\n    infoMessage,\n    afterChange,\n    disabled,\n    input: { onChange, checked, ...input },\n  } = useFieldApi({\n    ...props,\n    type: 'checkbox',\n  });\n  const formOptions = useFormApi();\n\n  return (\n    <Checkbox\n      {...input}\n      isChecked={checked}\n      isDisabled={disabled}\n      id={`descriptive-checkbox-${input.name}`}\n      onChange={(event, checked, ...rest) => {\n        onChange(event, checked, ...rest);\n        afterChange?.(formOptions, checked);\n      }}\n      data-type=\"descriptive-checkbox\"\n      className=\"pref-c-descriptive-checkbox\"\n      label={label || title}\n      description={\n        <div>\n          {description && (\n            <>\n              <span className=\"pref-c-checkbox-description\">{description}</span>\n            </>\n          )}\n          {!checked && infoMessage && (\n            <span className=\"pref-c-checkbox-info\">\n              <InfoCircleIcon /> {infoMessage}\n            </span>\n          )}\n          {checked && checkedWarning && (\n            <span className=\"pref-c-checkbox-warning\">\n              <ExclamationTriangleIcon /> {checkedWarning}\n            </span>\n          )}\n        </div>\n      }\n    />\n  );\n};\n\nDescriptiveCheckbox.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  group: PropTypes.string,\n  section: PropTypes.string,\n  name: PropTypes.string,\n  label: PropTypes.string,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  afterChange: PropTypes.func,\n};\n\nDescriptiveCheckbox.defaultProps = {\n  name: '',\n  label: '',\n};\n\nexport default DescriptiveCheckbox;\n","import React from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport PropTypes from 'prop-types';\n\nconst Loader = ({\n  name,\n  size,\n  FieldProvider,\n  validate,\n  FormSpyProvider,\n  formOptions,\n  ...rest\n}) => (\n  <div {...rest}>\n    <Skeleton size={size}></Skeleton>\n  </div>\n);\n\nLoader.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n  validate: PropTypes.any,\n  name: PropTypes.string,\n  size: PropTypes.string,\n};\n\nLoader.defaultProps = {\n  name: '',\n  size: 'md',\n};\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport {\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nclass DataListRow extends Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch(_error, info) {\n    this.setState({ hasError: info });\n  }\n\n  render() {\n    const { fieldsKey, label, fields, formOptions } = this.props;\n    const { hasError } = this.state;\n    return (\n      <DataListItemRow>\n        <DataListItemCells\n          dataListCells={[\n            <DataListCell\n              isFilled={false}\n              className=\"pref-c-title pref-u-bold\"\n              key={`${fieldsKey}-title`}\n            >\n              {fieldsKey === 0 ? label : ''}\n            </DataListCell>,\n            <DataListCell isFilled key={`${fieldsKey}-content`}>\n              {hasError\n                ? 'Error while mapping fields, please check your schema if it has valid component types'\n                : formOptions?.renderForm(fields, formOptions)}\n            </DataListCell>,\n          ]}\n        />\n      </DataListItemRow>\n    );\n  }\n}\n\nDataListRow.propTypes = {\n  fieldsKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fields: PropTypes.array,\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  validate: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n};\n\n// eslint-disable-next-line no-unused-vars\nconst DataListLayout = (props) => {\n  const { sections, label, name } = useFieldApi(props);\n  const formOptions = useFormApi();\n  return (\n    <DataList aria-label={label || name} {...props}>\n      {sections.map(({ label, fields }, key) => {\n        const actualFields = Array.isArray(fields) ? fields : [fields];\n        return (\n          actualFields.length > 0 && (\n            <DataListItem name={name} key={key} aria-labelledby=\"simple-item1\">\n              {actualFields.map(({ fields: fieldsToRender }, fieldsKey) => (\n                <DataListRow\n                  key={`${key}-${fieldsKey}`}\n                  fieldsKey={fieldsKey}\n                  label={label}\n                  fields={fieldsToRender}\n                  formOptions={formOptions}\n                />\n              ))}\n            </DataListItem>\n          )\n        );\n      })}\n    </DataList>\n  );\n};\n\nDataListLayout.propTypes = {\n  sections: PropTypes.array,\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  validate: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n};\n\nexport default DataListLayout;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport './BulkSelectButton.scss';\n\nconst BulkSelectButton = (props) => {\n  const formOptions = useFormApi();\n  const { input, section, onClick } = useFieldApi({\n    ...props,\n    type: 'button',\n  });\n\n  return (\n    <Button\n      className=\"pref-c-bulk-select-button\"\n      variant=\"secondary\"\n      {...input}\n      id={`bulk-select-${section}`}\n      onClick={() => onClick?.(formOptions, input)}\n    >\n      {input.value ? 'Select' : 'Deselect'} all\n    </Button>\n  );\n};\n\nBulkSelectButton.propTypes = {\n  section: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default BulkSelectButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormApi } from '@data-driven-forms/react-form-renderer';\nimport { FormGroup, Text } from '@patternfly/react-core';\nimport './inputGroup.scss';\n\nconst InputGroup = ({ fields, label, level, description }) => {\n  const formOptions = useFormApi();\n\n  return (\n    <FormGroup\n      className={`pref-c-input-${level === 1 ? 'category' : 'group'}`}\n      label={label}\n    >\n      {description ? <Text className=\"pf-u-pb-md\">{description}</Text> : null}\n      {formOptions.renderForm(fields, formOptions)}\n    </FormGroup>\n  );\n};\n\nInputGroup.propTypes = {\n  fields: PropTypes.array.isRequired,\n  label: PropTypes.string,\n  level: PropTypes.number,\n  description: PropTypes.string,\n};\n\nexport default InputGroup;\n","export const BULK_SELECT_BUTTON = 'BULK_SELECT_BUTTON';\nexport const DESCRIPTIVE_CHECKBOX = 'descriptiveCheckbox';\nexport const LOADER = 'loader';\nexport const DATA_LIST = 'section';\nexport const BUTTON = 'bulkSelectButton';\nexport const INPUT_GROUP = 'inputGroup';\nexport const FORM_TABS = 'tabs';\nexport const TAB_GROUP = 'tabGroup';\n","import React from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { getEmailSchema } from '../redux/actions/email-actions';\nimport { loaderField } from './constants';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const getSchema = (app) =>\n  !app || !app.loaded ? loaderField : app.schema;\n\nconst withNegatedFunction = (booleanFunctions) => {\n  return {\n    ...booleanFunctions,\n    ...Object.fromEntries(\n      Object.keys(booleanFunctions).map((methodName) => [\n        `!${methodName}`,\n        (...args) => !booleanFunctions[methodName](...args),\n      ])\n    ),\n  };\n};\n\nexport const visibilityFunctions = withNegatedFunction({\n  ...insights.chrome?.visibilityFunctions,\n  hasLoosePermissions: async (permissions = []) => {\n    const userPermissions = await insights.chrome.getUserPermissions();\n    return permissions.some((item) =>\n      userPermissions?.find(({ permission }) => permission === item)\n    );\n  },\n});\n\nexport const calculatePermissions = (permissions) =>\n  Promise.all(\n    [permissions]\n      .flat()\n      .map(({ method, args }) =>\n        visibilityFunctions?.[method]?.(...(args || []))\n      )\n  ).then((visibility) => visibility.every(Boolean));\n\nexport const calculateEmailConfig = (\n  { 'email-preference': config } = { 'email-preference': {} },\n  dispatch = () => {}\n) =>\n  Object.entries(config)\n    .map(\n      ([\n        key,\n        { permissions, url, apiName, apiVersion, localFile, ...rest },\n      ]) => {\n        const isVisible = permissions\n          ? calculatePermissions(permissions)\n          : true;\n        (async () => {\n          const schemaVisible = await Promise.resolve(isVisible);\n          if (schemaVisible) {\n            if (localFile) {\n              const newMapper = (await import(`../config/${localFile}`))\n                .default;\n              dispatch(getEmailSchema({ schema: newMapper, application: key }));\n            } else {\n              dispatch(\n                getEmailSchema({ application: key, url, apiName, apiVersion })\n              );\n            }\n          }\n        })();\n\n        return {\n          [key]: {\n            localFile,\n            isVisible,\n            url,\n            apiName,\n            apiVersion,\n            ...rest,\n          },\n        };\n      }\n    )\n    .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n\nexport const getSection = (\n  key,\n  schema = {},\n  storeSchema,\n  success = () => {}\n) => {\n  if (schema.isVisible === true) {\n    return {\n      label: schema?.title,\n      name: key,\n      fields: schema?.fields || getSchema(storeSchema),\n    };\n  } else {\n    Promise.resolve(schema.isVisible).then(success);\n\n    return {\n      label: <Skeleton />,\n      name: key,\n      fields: loaderField,\n    };\n  }\n};\n\nexport const concatApps = (apps = []) => {\n  return `${apps.slice(0, apps.length - (apps.length > 1)).join(', ')}${\n    apps.length >= 2 ? ` and ${apps[apps.length - 1]}` : ''\n  }`;\n};\n\nexport const distributeSuccessError = (promisses = []) => {\n  return Promise.allSettled(promisses.map(({ promise }) => promise)).then(\n    (apps) => {\n      return apps.reduce(\n        (acc, { value }, index) => ({\n          ...acc,\n          [value ? 'success' : 'error']: [\n            ...acc[value ? 'success' : 'error'],\n            promisses[index]?.meta?.title,\n          ],\n        }),\n        { success: [], error: [] }\n      );\n    }\n  );\n};\n\nexport const dispatchMessages = (\n  dispatch = () => undefined,\n  success = [],\n  error = []\n) => {\n  if (error.length !== 0 && success.length !== 0) {\n    dispatch(\n      addNotification({\n        dismissable: false,\n        variant: 'success',\n        title: `Email preferences for ${concatApps(\n          success\n        )} successfully saved`,\n      })\n    );\n\n    dispatch(\n      addNotification({\n        dismissable: false,\n        variant: 'danger',\n        title: `Email preferences for ${concatApps(\n          error\n        )} unsuccessfully saved`,\n      })\n    );\n  }\n\n  if (error.length === 0 && success.length !== 0) {\n    dispatch(\n      addNotification({\n        dismissable: false,\n        variant: 'success',\n        title: 'Preferences successfully saved',\n      })\n    );\n  }\n\n  if (error.length !== 0 && success.length === 0) {\n    dispatch(\n      addNotification({\n        dismissable: false,\n        variant: 'danger',\n        title: 'Preferences unsuccessfully saved',\n      })\n    );\n  }\n};\n","export const getNavFromURL = (location, navigate, fields, defaults) => {\n  const searchParams = new URLSearchParams(location?.search);\n  const params = Object.fromEntries(searchParams);\n\n  if (\n    fields.some(\n      (bundle) =>\n        bundle.name === params.bundle &&\n        bundle.fields.some((app) => app.name === params.app)\n    )\n  ) {\n    return params;\n  } else {\n    if (defaults.bundle && defaults.app) {\n      searchParams.set('bundle', defaults.bundle);\n      searchParams.set('app', defaults.app);\n      navigate(\n        {\n          pathname: location.pathname,\n          search: searchParams.toString(),\n        },\n        { replace: true }\n      );\n    }\n    return { ...params, ...defaults };\n  }\n};\n\nexport const setNavToURL = (location, navigate, params) => {\n  let searchParams = new URLSearchParams(location?.search);\n  Object.entries(params).forEach(([key, value]) => {\n    searchParams.set(key, value);\n  });\n\n  navigate(\n    {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    },\n    { replace: true }\n  );\n};\n","import React, { useMemo } from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  Divider,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateFooter,\n  EmptyStateHeader,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Menu,\n  MenuContent,\n  MenuGroup,\n  MenuItem,\n  MenuList,\n  MenuSearch,\n  MenuSearchInput,\n  SearchInput,\n  TextInput,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getNavFromURL } from './urlSync';\n\nconst renderEmptyState = (setSearch) => (\n  <EmptyState variant={EmptyStateVariant.sm} className=\"pf-u-mt-lg\">\n    <EmptyStateHeader\n      titleText=\"No matching services found\"\n      icon={<EmptyStateIcon icon={SearchIcon} />}\n      headingLevel=\"h4\"\n    />\n    <EmptyStateBody>Adjust your filters and try again.</EmptyStateBody>\n    <EmptyStateFooter>\n      <Button variant={ButtonVariant.link} onClick={() => setSearch('')}>\n        Clear filters\n      </Button>\n    </EmptyStateFooter>\n  </EmptyState>\n);\n\nconst TabsMenu = ({ searchRef, search, setSearch, fields, onClick }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const { bundle, app } = useMemo(\n    () => getNavFromURL(location, navigate, fields, {}),\n    [location.search]\n  );\n\n  return (\n    <Menu isPlain isScrollable>\n      <MenuSearch>\n        <MenuSearchInput ref={searchRef} className=\"pf-u-mx-sm\">\n          <SearchInput\n            data-testid=\"search-input\"\n            aria-label=\"Filter menu items\"\n            placeholder=\"Search services\"\n            customIcon={<SearchIcon />}\n            type=\"search\"\n            onChange={(_e, value) => setSearch(value)}\n            onClear={(_e) => setSearch('')}\n            value={search}\n          />\n        </MenuSearchInput>\n      </MenuSearch>\n      <Divider />\n      <MenuContent id=\"notifications-menu-content\">\n        {fields.some((bundle) => bundle.fields.length > 0)\n          ? fields.map(({ fields, title: bundleLabel, name: bundleName }) =>\n              fields.length > 0 ? (\n                <MenuGroup\n                  label={bundleLabel}\n                  className=\"pf-u-px-sm\"\n                  key={`menu-group-${bundleName}`}\n                >\n                  <MenuList>\n                    {fields.map(\n                      ({ label: sectionLabel, name: sectionName }) => (\n                        <MenuItem\n                          onClick={(e) => onClick(e, bundleName, sectionName)}\n                          key={`menu-item-${bundleName}-${sectionName}`}\n                          isFocused={\n                            bundle === bundleName && app === sectionName\n                          }\n                        >\n                          {sectionLabel}\n                        </MenuItem>\n                      )\n                    )}\n                  </MenuList>\n                </MenuGroup>\n              ) : null\n            )\n          : renderEmptyState(setSearch)}\n      </MenuContent>\n    </Menu>\n  );\n};\n\nTabsMenu.propTypes = {\n  fields: PropTypes.array.isRequired,\n  search: PropTypes.string,\n  setSearch: PropTypes.func,\n  searchRef: PropTypes.object,\n  onClick: PropTypes.func,\n};\n\nexport default TabsMenu;\n","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormApi } from '@data-driven-forms/react-form-renderer';\nimport { Text, Title } from '@patternfly/react-core';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useFormState } from 'react-final-form';\nimport { getNavFromURL, setNavToURL } from './urlSync';\nimport TabsMenu from './TabsMenu';\n\nconst renderPageHeading = (bundleTitle, sectionTitle) => (\n  <React.Fragment>\n    <Title headingLevel=\"h3\" size=\"xl\" className=\"pf-u-pb-xs\">\n      {`${sectionTitle} | ${bundleTitle}`}\n    </Title>\n    <Text className=\"pf-u-mb-md\">\n      Configure your {sectionTitle} notifications.\n    </Text>\n  </React.Fragment>\n);\n\nconst FormTabs = ({ fields, titleRef, bundles }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const formOptions = useFormApi();\n  const searchRef = useRef(null);\n  const navConfig = useRef({});\n\n  const [search, setSearch] = useState('');\n  const [filteredFields, setFilteredFields] = useState(fields);\n  const { pristine, submitSucceeded, dirtyFieldsSinceLastSubmit } =\n    useFormState();\n\n  const handleResize = () => {\n    const container = document.getElementById('notifications-container');\n    const gridElement = document.getElementById('notifications-grid');\n    const menu = document.getElementById('notifications-menu-content');\n    if (menu?.style && gridElement?.style) {\n      const buttonsHeight =\n        document\n          .getElementById('user-pref__form-buttons')\n          ?.getBoundingClientRect()?.height || 0;\n      gridElement.style.height = `${\n        container.getBoundingClientRect().height - buttonsHeight\n      }px`;\n      const menuMaxHeight =\n        container.getBoundingClientRect().height -\n        titleRef.current.getBoundingClientRect().height -\n        searchRef.current.getBoundingClientRect().height -\n        (menu.style.height < menu.scrollHeight ? buttonsHeight : 0) -\n        1;\n      menu.style.maxHeight = `${menuMaxHeight}px`;\n      menu.style.height = `${menuMaxHeight - buttonsHeight}px`;\n    }\n  };\n\n  useEffect(() => {\n    if (window.screen.width > 768) {\n      window.addEventListener('resize', handleResize);\n      handleResize();\n    }\n\n    navConfig.current = getNavFromURL(location, navigate, fields, {\n      bundle: fields?.[0]?.name,\n      app: fields?.[0]?.fields?.[0]?.name,\n    });\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  useEffect(() => {\n    const filtered = fields.reduce(\n      (acc, bundle) => [\n        ...acc,\n        {\n          ...bundle,\n          fields: bundle.fields.filter((item) => {\n            const searchValue = search.toLowerCase();\n            return (\n              item.name?.toLowerCase().includes(searchValue) ||\n              item.title?.toLowerCase().includes(searchValue)\n            );\n          }, []),\n        },\n      ],\n      []\n    );\n    setFilteredFields(filtered);\n  }, [search]);\n\n  useEffect(() => {\n    handleResize();\n  }, [pristine, submitSucceeded, dirtyFieldsSinceLastSubmit]);\n\n  return (\n    <React.Fragment>\n      <div className=\"pref-notifications--nav\">\n        <TabsMenu\n          searchRef={searchRef}\n          search={search}\n          setSearch={setSearch}\n          fields={filteredFields}\n          onClick={(e, bundleName, sectionName) => {\n            e.preventDefault();\n            navConfig.current = {\n              bundle: bundleName,\n              app: sectionName,\n            };\n            setNavToURL(location, navigate, navConfig.current);\n          }}\n        />\n      </div>\n      <div className=\"pref-notifications--inputs\">\n        <React.Fragment>\n          {renderPageHeading(\n            bundles[navConfig.current.bundle]?.label,\n            fields\n              .reduce((acc, curr) => [...acc, ...curr.fields], [])\n              .filter(\n                (item) =>\n                  item.name === navConfig.current.app &&\n                  item.bundle === navConfig.current.bundle\n              )?.[0]?.label\n          )}\n          <div>\n            {formOptions.renderForm(\n              fields.reduce(\n                (acc, curr) => [\n                  ...acc,\n                  ...curr.fields.map((item) => ({\n                    ...item,\n                    key: `form-${item.bundle}-${item.name}`,\n                    fields: [\n                      item.fields.map((input) => ({\n                        ...input,\n                        hideField: !(\n                          item.name === navConfig.current.app &&\n                          item.bundle === navConfig.current.bundle\n                        ),\n                      })),\n                    ],\n                  })),\n                ],\n                []\n              ),\n              formOptions\n            )}\n          </div>\n        </React.Fragment>\n      </div>\n    </React.Fragment>\n  );\n};\n\nFormTabs.propTypes = {\n  fields: PropTypes.array.isRequired,\n  titleRef: PropTypes.any,\n  bundles: PropTypes.shape({ label: PropTypes.string }),\n};\n\nexport default React.memo(FormTabs);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormApi } from '@data-driven-forms/react-form-renderer';\n\nconst FormTabGroup = ({ fields }) => {\n  const formOptions = useFormApi();\n\n  return (\n    <div className=\"pf-c-form\">\n      {formOptions.renderForm(fields, formOptions)}\n    </div>\n  );\n};\n\nFormTabGroup.propTypes = {\n  fields: PropTypes.array.isRequired,\n};\n\nexport default FormTabGroup;\n","import omit from 'lodash/omit';\nimport {\n  BULK_SELECT_BUTTON,\n  INPUT_GROUP,\n  TAB_GROUP,\n} from '../../SmartComponents/FormComponents/componentTypes';\n\n// update bulk select button's state after every change\nconst afterChange = (formOptions, newValue, bundle, app) => {\n  if (!newValue) {\n    formOptions.change(\n      `bundles[${bundle}].applications[${app}].eventTypes[${BULK_SELECT_BUTTON}]`,\n      true\n    );\n  } else {\n    const allChecked = Object.entries(\n      formOptions.getState().values.bundles?.[bundle]?.applications?.[app]\n        .eventTypes || {}\n    ).every(([key, value]) => key === BULK_SELECT_BUTTON || value);\n    if (\n      allChecked &&\n      ((bundle !== 'rhel' && app !== 'advisor') ||\n        formOptions.getState().values['is_subscribed'])\n    ) {\n      formOptions.change(\n        `bundles[${bundle}].applications[${app}].eventTypes[${BULK_SELECT_BUTTON}]`,\n        false\n      );\n    }\n  }\n};\n\nexport const prepareFields = (notifPref, emailPref, emailConfig) =>\n  Object.entries(notifPref).reduce((acc, [bundleKey, bundleData]) => {\n    return [\n      ...acc,\n      {\n        title: bundleData?.label,\n        name: bundleKey,\n        fields: Object.entries(bundleData.applications).reduce(\n          (acc, [appKey, appData]) => {\n            let selectAllActive = true;\n            const fields = [\n              ...Object.entries(emailPref).reduce(\n                (acc, emailSection) => [\n                  ...acc,\n                  ...(emailSection[0] === appKey &&\n                  emailConfig[emailSection[0]]?.bundle === bundleKey\n                    ? [\n                        {\n                          label: 'Reports',\n                          name: 'email-reports',\n                          component: INPUT_GROUP,\n                          level: 1,\n                          fields: emailSection[1].schema[0]?.fields?.map(\n                            (field) => {\n                              selectAllActive =\n                                selectAllActive && field.initialValue;\n                              return {\n                                ...omit(field, [\n                                  'infoMessage',\n                                  'checkedWarning',\n                                ]),\n                                afterChange: (formOptions, checked) =>\n                                  afterChange(\n                                    formOptions,\n                                    checked,\n                                    bundleKey,\n                                    appKey\n                                  ),\n                              };\n                            }\n                          ),\n                        },\n                      ] || []\n                    : []),\n                ],\n                []\n              ),\n              {\n                label: 'Event notifications',\n                description:\n                  'Select how would you like to receive notifications for each event.',\n                name: 'event-notifications',\n                component: INPUT_GROUP,\n                level: 1,\n                fields: [\n                  ...appData.eventTypes.map((eventType, idx) => ({\n                    label: eventType.label,\n                    name: `${eventType.name}-${idx}`,\n                    component: INPUT_GROUP,\n                    fields: eventType.fields.map((field) => {\n                      selectAllActive = selectAllActive && field.initialValue;\n                      return {\n                        ...omit(field, [\n                          'description',\n                          'infoMessage',\n                          'checkedWarning',\n                        ]),\n                        afterChange: (formOptions, checked) =>\n                          afterChange(formOptions, checked, bundleKey, appKey),\n                      };\n                    }),\n                  })),\n                ],\n              },\n            ];\n            return [\n              ...acc,\n              {\n                name: appKey,\n                bundle: bundleKey,\n                label: appData.label,\n                component: TAB_GROUP,\n                fields: [\n                  {\n                    name: `bundles[${bundleKey}].applications[${appKey}].eventTypes[${BULK_SELECT_BUTTON}]`,\n                    section: appKey,\n                    initialValue: !selectAllActive,\n                    component: BULK_SELECT_BUTTON,\n                    onClick: (formOptions, input) => {\n                      formOptions.batch(() => {\n                        formOptions.getRegisteredFields().forEach((field) => {\n                          if (\n                            ((field.includes(bundleKey) &&\n                              field.includes(appKey)) ||\n                              (field === 'is_subscribed' && // a temporary condition for RHEL Advisor email pref.\n                                bundleKey === 'rhel' &&\n                                appKey == 'advisor')) &&\n                            !field.includes(BULK_SELECT_BUTTON)\n                          ) {\n                            formOptions.change(field, input.value);\n                          }\n                        });\n                      });\n                      input.onChange(!input.value);\n                    },\n                  },\n                  ...fields,\n                ],\n              },\n            ];\n          },\n          []\n        ),\n      },\n    ];\n  }, []);\n","import React from 'react';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { isEmpty } from 'lodash';\nimport { ActionGroup } from '@patternfly/react-core';\nimport { FormSpy } from '@data-driven-forms/react-form-renderer';\nimport './form-buttons.scss';\n\nconst FormButtons = ({\n  dirtyFieldsSinceLastSubmit,\n  submitSucceeded,\n  pristine,\n}) => {\n  const { reset } = useFormApi();\n  const noChanges =\n    isEmpty(dirtyFieldsSinceLastSubmit) || (!submitSucceeded && pristine);\n  return noChanges ? null : (\n    <div\n      id=\"user-pref__form-buttons\"\n      className=\"pref-shared--buttons pf-m-9-col-on-md\"\n    >\n      <ActionGroup className=\"pref-shared--actions pf-u-px-lg pf-u-py-md\">\n        <Button\n          type=\"submit\"\n          ouiaId=\"user-pref__submit-button\"\n          isDisabled={noChanges}\n          variant=\"primary\"\n        >\n          Save\n        </Button>\n        <Button\n          variant=\"link\"\n          ouiaId=\"user-pref__reset-button\"\n          isDisabled={noChanges}\n          onClick={() => reset()}\n        >\n          Cancel\n        </Button>\n      </ActionGroup>\n    </div>\n  );\n};\n\nFormButtons.propTypes = {\n  dirtyFieldsSinceLastSubmit: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOfType([PropTypes.bool]),\n  }),\n  submitSucceeded: PropTypes.bool,\n  pristine: PropTypes.bool,\n};\n\nconst FormButtonWithSpies = (formProps) => (\n  <FormSpy\n    subscription={{\n      pristine: true,\n      submitSucceeded: true,\n      dirtyFieldsSinceLastSubmit: true,\n    }}\n  >\n    {(props) => <FormButtons {...props} {...formProps} />}\n  </FormSpy>\n);\n\nexport default FormButtonWithSpies;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormApi } from '@data-driven-forms/react-form-renderer';\nimport WarningModal from '@patternfly/react-component-groups/dist/dynamic/WarningModal';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport FormButtons from '../shared/FormButtons';\nimport pathnames from '../../Utilities/pathnames';\n\nconst NotificationsTemplate = ({ schema, formFields }) => {\n  const formApi = useFormApi();\n  const [isVisibleDialog, setVisibleDialog] = useState(false);\n\n  const { chromeHistory } = useChrome();\n  const [triggerExit, setTriggerExit] = useState({\n    confirmed: false,\n    pathname: '',\n    search: '',\n  });\n\n  const handleGoToIntendedPage = useCallback(\n    (pathname, search) =>\n      search.length > 0\n        ? chromeHistory.push({ pathname, search })\n        : chromeHistory.push(pathname),\n    [chromeHistory]\n  );\n\n  useEffect(() => {\n    const navigationAllowed =\n      !formApi.getState().dirty ||\n      triggerExit.confirmed ||\n      triggerExit.search.length > 0;\n    navigationAllowed &&\n      handleGoToIntendedPage(triggerExit.pathname, triggerExit.search);\n\n    const unblock = chromeHistory.block(({ location }) => {\n      if (\n        formApi.getState().dirty &&\n        location.search?.length === 0 &&\n        !(\n          location.pathname?.includes(pathnames.notifications.link) &&\n          location.pathname?.includes('user-preferences')\n        )\n      ) {\n        setVisibleDialog(true);\n      }\n      setTriggerExit((obj) => ({\n        ...obj,\n        pathname: location.pathname,\n        search: location.search,\n      }));\n      return navigationAllowed;\n    });\n\n    return () => {\n      unblock();\n    };\n  }, [triggerExit.confirmed, triggerExit.pathname, triggerExit.search]);\n\n  return (\n    <>\n      <WarningModal\n        isOpen={isVisibleDialog}\n        title=\"Unsaved changes\"\n        onConfirm={() => {\n          setTriggerExit((obj) => ({\n            ...obj,\n            confirmed: true,\n          }));\n          setVisibleDialog(false);\n        }}\n        onClose={() => setVisibleDialog(false)}\n      >\n        Your page contains unsaved changes. Do you want to leave?\n      </WarningModal>\n\n      <form onSubmit={formApi.handleSubmit} style={{ display: 'contents' }}>\n        {schema.title}\n        {formFields}\n        <FormButtons />\n      </form>\n    </>\n  );\n};\n\nNotificationsTemplate.propTypes = {\n  schema: PropTypes.shape({\n    title: PropTypes.node,\n  }),\n  formFields: PropTypes.array,\n};\n\nexport default NotificationsTemplate;\n","import React, { useEffect, useRef, useState } from 'react';\nimport omit from 'lodash/omit';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { FormRenderer } from '@data-driven-forms/react-form-renderer';\nimport { componentMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { Bullseye, Spinner, Text } from '@patternfly/react-core';\nimport { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useStore } from 'react-redux';\nimport {\n  getNotificationsSchema,\n  saveNotificationValues,\n} from '../../redux/actions/notifications-actions';\nimport { saveEmailValues } from '../../redux/actions/email-actions';\nimport { calculateEmailConfig } from '../../Utilities/functions';\nimport {\n  BULK_SELECT_BUTTON,\n  BulkSelectButton,\n  DATA_LIST,\n  DESCRIPTIVE_CHECKBOX,\n  DataListLayout,\n  DescriptiveCheckbox,\n  FORM_TABS,\n  INPUT_GROUP,\n  InputGroup,\n  LOADER,\n  Loader,\n  TAB_GROUP,\n} from '../../SmartComponents/FormComponents';\nimport config from '../../config/config.json';\nimport FormTabs from './Tabs';\nimport FormTabGroup from './TabGroup';\nimport { prepareFields } from './utils';\nimport FormTemplate from './NotificationTemplate';\nimport './notifications.scss';\n\nconst Notifications = () => {\n  const { auth } = useChrome();\n  const dispatch = useDispatch();\n  const titleRef = useRef(null);\n  const [emailConfig, setEmailConfig] = useState({});\n  const store = useStore();\n\n  const emailPref = useSelector(({ emailReducer }) => emailReducer);\n  const { bundles: notifPref, loaded } = useSelector(\n    ({ notificationsReducer }) => ({\n      ...notificationsReducer,\n      bundles: Object.entries(notificationsReducer?.bundles || {})?.reduce(\n        (acc, [key, value]) => ({\n          ...acc,\n          [key]: value,\n        }),\n        {}\n      ),\n    })\n  );\n\n  useEffect(() => {\n    (async () => {\n      await auth.getUser();\n      setEmailConfig(calculateEmailConfig(config, dispatch));\n      dispatch(getNotificationsSchema());\n    })();\n  }, []);\n\n  const saveValues = (values, formApi) => {\n    const notificationValues = {\n      bundles: Object.entries(values.bundles).reduce(\n        (acc, [bundleName, bundleData]) => ({\n          ...acc,\n          [bundleName]: {\n            applications: Object.entries(bundleData.applications).reduce(\n              (acc, [appName, appData]) => ({\n                ...acc,\n                [appName]: {\n                  eventTypes: omit(appData.eventTypes, BULK_SELECT_BUTTON),\n                },\n              }),\n              {}\n            ),\n          },\n        }),\n        {}\n      ),\n    };\n    const promises = [dispatch(saveNotificationValues(notificationValues))];\n    const submitEmail = formApi.getState().dirtyFields['is_subscribed'];\n    // temporary submitting of RHEL Advisor email pref.\n    if (submitEmail) {\n      const { url, apiName } = emailConfig['advisor'];\n      const action = saveEmailValues({\n        application: 'advisor',\n        values: { is_subscribed: values.is_subscribed },\n        url,\n        apiName,\n      });\n      promises.push(dispatch(action));\n    }\n    Promise.all(promises)\n      .then(() => {\n        submitEmail && setEmailConfig(calculateEmailConfig(config, dispatch));\n        dispatch(getNotificationsSchema());\n        dispatch(\n          addNotification({\n            dismissable: true,\n            variant: 'success',\n            title: 'Notification preferences successfully saved',\n          })\n        );\n      })\n      .catch(() => {\n        dispatch(\n          addNotification({\n            dismissable: true,\n            variant: 'danger',\n            title: 'Notification preferences unsuccessfully saved',\n          })\n        );\n      });\n  };\n\n  return loaded && Object.values(emailPref).every((value) => value.loaded) ? (\n    <div id=\"notifications-container\" className=\"pref-notifications--container\">\n      <div className=\"pref-notifications--wrapper\">\n        <div id=\"notifications-grid\" className=\"pref-notifications--grid\">\n          <div ref={titleRef} className=\"pref-notifications--head\">\n            <PageHeaderTitle\n              className=\"pref-notifications--title sticky\"\n              title=\"My Notifications\"\n            />\n            <Text className=\"pref-notifications--subtitle\">\n              Opt in or out of receiving notifications, and choose how you want\n              to be notified. Your Organization Administrator has configured\n              which notifications you can or can’t receive in their{' '}\n              <a href={`/settings/notifications`}>Settings</a>.\n              <ScalprumComponent\n                module=\"./ConnectedTimeConfig\"\n                scope=\"notifications\"\n                store={store}\n              />\n            </Text>\n          </div>\n\n          <FormRenderer\n            componentMapper={{\n              ...componentMapper,\n              [DESCRIPTIVE_CHECKBOX]: DescriptiveCheckbox,\n              [BULK_SELECT_BUTTON]: BulkSelectButton,\n              [LOADER]: Loader,\n              [DATA_LIST]: DataListLayout,\n              [INPUT_GROUP]: InputGroup,\n              [FORM_TABS]: FormTabs,\n              [TAB_GROUP]: FormTabGroup,\n            }}\n            FormTemplate={FormTemplate}\n            schema={{\n              fields: [\n                {\n                  component: FORM_TABS,\n                  name: 'notifTabs',\n                  titleRef,\n                  bundles: notifPref,\n                  fields: prepareFields(notifPref, emailPref, emailConfig),\n                },\n              ],\n            }}\n            onSubmit={saveValues}\n          />\n        </div>\n      </div>\n    </div>\n  ) : (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default Notifications;\n","var map = {\n\t\"./config.json\": [\n\t\t7174\n\t],\n\t\"./data/general.json\": [\n\t\t37175,\n\t\t7175\n\t],\n\t\"./data/unsubscribe.json\": [\n\t\t4686,\n\t\t4686\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 99197;\nmodule.exports = webpackAsyncContext;"],"names":["interceptors","response","use","config","data","JSON","parse","_e","getApplicationSchema","application","apiVersion","resourceType","url","get","getNotificationsSchema","saveValues","async","apiName","values","post","props","type","GET_NOTIFICATIONS_SCHEMA","payload","meta","notifications","rejected","variant","title","description","saveNotificationValues","SAVE_NOTIFICATION_SCHEMA","getEmailSchema","schema","GET_EMAIL_SCHEMA","appName","label","DescriptiveCheckbox","checkedWarning","infoMessage","afterChange","disabled","input","onChange","checked","formOptions","Checkbox","isChecked","isDisabled","id","name","event","rest","className","propTypes","FieldProvider","group","section","defaultProps","Loader","size","validate","FormSpyProvider","DataListRow","Component","state","hasError","componentDidCatch","_error","info","this","setState","render","fieldsKey","fields","DataListItemRow","DataListItemCells","dataListCells","DataListCell","isFilled","key","renderForm","DataListLayout","sections","DataList","map","actualFields","Array","isArray","length","DataListItem","fieldsToRender","BulkSelectButton","onClick","Button","value","InputGroup","level","FormGroup","Text","isRequired","BULK_SELECT_BUTTON","DESCRIPTIVE_CHECKBOX","LOADER","DATA_LIST","INPUT_GROUP","FORM_TABS","TAB_GROUP","visibilityFunctions","booleanFunctions","insights","chrome","hasLoosePermissions","permissions","userPermissions","getUserPermissions","some","item","find","permission","Object","fromEntries","keys","methodName","args","calculateEmailConfig","dispatch","entries","localFile","isVisible","Promise","all","flat","method","then","visibility","every","Boolean","calculatePermissions","resolve","newMapper","default","reduce","acc","curr","getNavFromURL","location","navigate","defaults","searchParams","URLSearchParams","search","params","bundle","app","set","pathname","toString","replace","TabsMenu","searchRef","setSearch","useLocation","useNavigate","useMemo","Menu","isPlain","isScrollable","MenuSearch","MenuSearchInput","ref","SearchInput","placeholder","customIcon","onClear","Divider","MenuContent","bundleLabel","bundleName","MenuGroup","MenuList","sectionLabel","sectionName","MenuItem","e","isFocused","EmptyState","EmptyStateVariant","sm","EmptyStateHeader","titleText","icon","EmptyStateIcon","headingLevel","EmptyStateBody","EmptyStateFooter","ButtonVariant","link","renderEmptyState","FormTabs","titleRef","bundles","useRef","navConfig","useState","filteredFields","setFilteredFields","pristine","submitSucceeded","dirtyFieldsSinceLastSubmit","handleResize","container","document","getElementById","gridElement","menu","style","buttonsHeight","getBoundingClientRect","height","menuMaxHeight","current","scrollHeight","maxHeight","useEffect","window","screen","width","addEventListener","removeEventListener","filtered","filter","searchValue","toLowerCase","includes","preventDefault","forEach","setNavToURL","bundleTitle","sectionTitle","Title","hideField","FormTabGroup","newValue","getState","applications","eventTypes","change","prepareFields","notifPref","emailPref","emailConfig","bundleKey","bundleData","appKey","appData","selectAllActive","emailSection","component","field","initialValue","eventType","idx","batch","getRegisteredFields","FormButtons","reset","noChanges","isEmpty","ActionGroup","ouiaId","formProps","subscription","NotificationsTemplate","formFields","formApi","isVisibleDialog","setVisibleDialog","chromeHistory","useChrome","triggerExit","setTriggerExit","confirmed","handleGoToIntendedPage","useCallback","push","navigationAllowed","dirty","unblock","block","pathnames","obj","WarningModal","isOpen","onConfirm","onClose","onSubmit","handleSubmit","display","auth","setEmailConfig","store","emailReducer","loaded","notificationsReducer","getUser","PageHeaderTitle","href","ScalprumComponent","module","scope","componentMapper","FormTemplate","notificationValues","promises","submitEmail","dirtyFields","action","SAVE_EMAIL_SCHEMA","saveEmailValues","is_subscribed","dismissable","catch","Bullseye","Spinner","webpackAsyncContext","req","__webpack_require__","o","Error","code","ids","slice","t","exports"],"sourceRoot":""}