{"version":3,"file":"js/Notifications.c3eea39463c461f1fc4f.js","mappings":"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","sources":["webpack:///./src/api.js","webpack:///./src/redux/actions/notifications-actions.js","webpack:///./src/redux/actions/email-actions.js","webpack:///./src/SmartComponents/FormComponents/DescriptiveCheckbox.js","webpack:///./src/SmartComponents/FormComponents/Loader.js","webpack:///./src/SmartComponents/FormComponents/DataListLayout.js","webpack:///./src/SmartComponents/FormComponents/BulkSelectButton.js","webpack:///./src/SmartComponents/FormComponents/InputGroup.js","webpack:///./src/SmartComponents/FormComponents/componentTypes.js","webpack:///./src/Utilities/functions.js","webpack:///./src/PresentationalComponents/Notifications/urlSync.js","webpack:///./src/PresentationalComponents/Notifications/TabsMenu.js","webpack:///./src/PresentationalComponents/Notifications/Tabs.js","webpack:///./src/PresentationalComponents/Notifications/TabGroup.js","webpack:///./src/PresentationalComponents/Notifications/utils.js","webpack:///./src/PresentationalComponents/shared/FormButtons.js","webpack:///./src/PresentationalComponents/Notifications/NotificationTemplate.js","webpack:///./src/PresentationalComponents/Notifications/Notifications.js","webpack:///./src/config/ lazy ^\\.\\/.*$ namespace object"],"sourcesContent":["import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nexport { instance };\n\ninstance.interceptors.response.use((response) => {\n  if (response?.config?.data) {\n    try {\n      return JSON.parse(response.config.data);\n    } catch (_e) {\n      return response.config.data;\n    }\n  }\n\n  return response;\n});\n\nexport const getApplicationSchema = (\n  application,\n  apiVersion = 'v1',\n  resourceType = '',\n  url\n) =>\n  instance.get(\n    `/api/${application}/${apiVersion}${url || `/user-config/${resourceType}`}`\n  );\n\nexport const getNotificationsSchema = (apiVersion = 'v1') =>\n  instance.get(\n    `/api/notifications/${apiVersion}/user-config/notification-event-type-preference`\n  );\n\nexport const saveValues = async (apiName, values, apiVersion = 'v1', url) =>\n  instance.post(\n    `/api/${apiName}/${apiVersion}${\n      url || '/user-config/notification-event-type-preference'\n    }`,\n    values\n  );\n","import {\n  getNotificationsSchema as getSchema,\n  saveValues as save,\n} from '../../api';\nimport { ACTION_TYPES } from '../action-types';\n\nexport const getNotificationsSchema = (props) => ({\n  type: ACTION_TYPES.GET_NOTIFICATIONS_SCHEMA,\n  payload: getSchema(props),\n  meta: {\n    notifications: {\n      rejected: {\n        variant: 'danger',\n        title: \"Request for user's configuration failed\",\n        description: `User's configuration notification for this bundle does not exist.`,\n      },\n    },\n  },\n});\n\nexport const saveNotificationValues = (values, apiVersion) => ({\n  type: ACTION_TYPES.SAVE_NOTIFICATION_SCHEMA,\n  payload: save('notifications', values, apiVersion),\n});\n","import { getApplicationSchema, saveValues as save } from '../../api';\nimport { ACTION_TYPES } from '../action-types';\n\nexport const getEmailSchema = ({\n  application,\n  apiVersion,\n  resourceType = 'email-preference',\n  schema,\n  url,\n  apiName,\n}) => ({\n  type: ACTION_TYPES.GET_EMAIL_SCHEMA,\n  payload:\n    schema ||\n    getApplicationSchema(apiName || application, apiVersion, resourceType, url),\n  meta: {\n    appName: application,\n    notifications: {\n      rejected: {\n        variant: 'danger',\n        title: \"Request for user's configuration failed\",\n        description: `User's configuration email for ${application?.label} application does not exist.`,\n      },\n    },\n  },\n});\n\nexport const saveEmailValues = ({\n  application,\n  values,\n  apiVersion,\n  url,\n  apiName,\n}) => ({\n  type: ACTION_TYPES.SAVE_EMAIL_SCHEMA,\n  payload: save(apiName || application, values, apiVersion, url),\n  meta: {\n    appName: application,\n    title: application?.label,\n  },\n});\n","import React from 'react';\nimport { Checkbox } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport './descriptiveCheckbox.scss';\nimport {\n  ExclamationTriangleIcon,\n  InfoCircleIcon,\n} from '@patternfly/react-icons';\n\nconst DescriptiveCheckbox = (props) => {\n  const {\n    label,\n    title,\n    description,\n    checkedWarning,\n    infoMessage,\n    afterChange,\n    input: { onChange, checked, ...input },\n  } = useFieldApi({\n    ...props,\n    type: 'checkbox',\n  });\n  const formOptions = useFormApi();\n\n  return (\n    <Checkbox\n      {...input}\n      isChecked={checked}\n      id={`descriptive-checkbox-${input.name}`}\n      onChange={(checked, event, ...rest) => {\n        onChange(checked, event, ...rest);\n        afterChange?.(formOptions, checked);\n      }}\n      data-type=\"descriptive-checkbox\"\n      className=\"pref-c-descriptive-checkbox\"\n      label={label || title}\n      description={\n        <div>\n          {description && (\n            <>\n              <span className=\"pref-c-checkbox-description\">{description}</span>\n            </>\n          )}\n          {!checked && infoMessage && (\n            <span className=\"pref-c-checkbox-info\">\n              <InfoCircleIcon /> {infoMessage}\n            </span>\n          )}\n          {checked && checkedWarning && (\n            <span className=\"pref-c-checkbox-warning\">\n              <ExclamationTriangleIcon /> {checkedWarning}\n            </span>\n          )}\n        </div>\n      }\n    />\n  );\n};\n\nDescriptiveCheckbox.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  group: PropTypes.string,\n  section: PropTypes.string,\n  name: PropTypes.string,\n  label: PropTypes.string,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  afterChange: PropTypes.func,\n};\n\nDescriptiveCheckbox.defaultProps = {\n  name: '',\n  label: '',\n};\n\nexport default DescriptiveCheckbox;\n","import React from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport PropTypes from 'prop-types';\n\nconst Loader = ({\n  name,\n  size,\n  FieldProvider,\n  validate,\n  FormSpyProvider,\n  formOptions,\n  ...rest\n}) => (\n  <div {...rest}>\n    <Skeleton size={size}></Skeleton>\n  </div>\n);\n\nLoader.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n  validate: PropTypes.any,\n  name: PropTypes.string,\n  size: PropTypes.string,\n};\n\nLoader.defaultProps = {\n  name: '',\n  size: 'md',\n};\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport {\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nclass DataListRow extends Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch(_error, info) {\n    this.setState({ hasError: info });\n  }\n\n  render() {\n    const { fieldsKey, label, fields, formOptions } = this.props;\n    const { hasError } = this.state;\n    return (\n      <DataListItemRow>\n        <DataListItemCells\n          dataListCells={[\n            <DataListCell\n              isFilled={false}\n              className=\"pref-c-title pref-u-bold\"\n              key={`${fieldsKey}-title`}\n            >\n              {fieldsKey === 0 ? label : ''}\n            </DataListCell>,\n            <DataListCell isFilled key={`${fieldsKey}-content`}>\n              {hasError\n                ? 'Error while mapping fields, please check your schema if it has valid component types'\n                : formOptions?.renderForm(fields, formOptions)}\n            </DataListCell>,\n          ]}\n        />\n      </DataListItemRow>\n    );\n  }\n}\n\nDataListRow.propTypes = {\n  fieldsKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fields: PropTypes.array,\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  validate: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n};\n\n// eslint-disable-next-line no-unused-vars\nconst DataListLayout = (props) => {\n  const { sections, label, name } = useFieldApi(props);\n  const formOptions = useFormApi();\n  return (\n    <DataList aria-label={label || name} {...props}>\n      {sections.map(({ label, fields }, key) => {\n        const actualFields = Array.isArray(fields) ? fields : [fields];\n        return (\n          actualFields.length > 0 && (\n            <DataListItem name={name} key={key} aria-labelledby=\"simple-item1\">\n              {actualFields.map(({ fields: fieldsToRender }, fieldsKey) => (\n                <DataListRow\n                  key={`${key}-${fieldsKey}`}\n                  fieldsKey={fieldsKey}\n                  label={label}\n                  fields={fieldsToRender}\n                  formOptions={formOptions}\n                />\n              ))}\n            </DataListItem>\n          )\n        );\n      })}\n    </DataList>\n  );\n};\n\nDataListLayout.propTypes = {\n  sections: PropTypes.array,\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  validate: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n};\n\nexport default DataListLayout;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport './BulkSelectButton.scss';\n\nconst BulkSelectButton = (props) => {\n  const formOptions = useFormApi();\n  const { input, section, onClick } = useFieldApi({\n    ...props,\n    type: 'button',\n  });\n\n  return (\n    <Button\n      className=\"pref-c-bulk-select-button\"\n      variant=\"secondary\"\n      {...input}\n      id={`bulk-select-${section}`}\n      onClick={() => onClick?.(formOptions, input)}\n    >\n      {input.value ? 'Select' : 'Deselect'} all\n    </Button>\n  );\n};\n\nBulkSelectButton.propTypes = {\n  section: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default BulkSelectButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormApi } from '@data-driven-forms/react-form-renderer';\nimport { FormGroup, Text } from '@patternfly/react-core';\nimport './inputGroup.scss';\n\nconst InputGroup = ({ fields, label, level, description }) => {\n  const formOptions = useFormApi();\n\n  return (\n    <FormGroup\n      className={`pref-c-input-${level === 1 ? 'category' : 'group'}`}\n      label={label}\n    >\n      {description ? <Text className=\"pf-u-pb-md\">{description}</Text> : null}\n      {formOptions.renderForm(fields, formOptions)}\n    </FormGroup>\n  );\n};\n\nInputGroup.propTypes = {\n  fields: PropTypes.array.isRequired,\n  label: PropTypes.string,\n  level: PropTypes.number,\n  description: PropTypes.string,\n};\n\nexport default InputGroup;\n","export const BULK_SELECT_BUTTON = 'BULK_SELECT_BUTTON';\nexport const DESCRIPTIVE_CHECKBOX = 'descriptiveCheckbox';\nexport const LOADER = 'loader';\nexport const DATA_LIST = 'section';\nexport const BUTTON = 'bulkSelectButton';\nexport const INPUT_GROUP = 'inputGroup';\nexport const FORM_TABS = 'tabs';\nexport const TAB_GROUP = 'tabGroup';\n","import React from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { getEmailSchema } from '../redux/actions/email-actions';\nimport { loaderField } from './constants';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const getSchema = (app) =>\n  !app || !app.loaded ? loaderField : app.schema;\n\nconst withNegatedFunction = (booleanFunctions) => {\n  return {\n    ...booleanFunctions,\n    ...Object.fromEntries(\n      Object.keys(booleanFunctions).map((methodName) => [\n        `!${methodName}`,\n        (...args) => !booleanFunctions[methodName](...args),\n      ])\n    ),\n  };\n};\n\nexport const useChromePush = () => {\n  const push = useChrome(({ chromeHistory: { push } = {} }) => push);\n  return (e, link) => {\n    if (typeof push === 'function') {\n      e.preventDefault();\n      push(link.replace(/^.\\//, '/'));\n    }\n  };\n};\n\nexport const visibilityFunctions = withNegatedFunction({\n  ...insights.chrome?.visibilityFunctions,\n  hasLoosePermissions: async (permissions = []) => {\n    const userPermissions = await insights.chrome.getUserPermissions();\n    return permissions.some((item) =>\n      userPermissions?.find(({ permission }) => permission === item)\n    );\n  },\n});\n\nexport const calculatePermissions = (permissions) =>\n  Promise.all(\n    [permissions]\n      .flat()\n      .map(({ method, args }) =>\n        visibilityFunctions?.[method]?.(...(args || []))\n      )\n  ).then((visibility) => visibility.every(Boolean));\n\nexport const calculateEmailConfig = (\n  { 'email-preference': config } = { 'email-preference': {} },\n  dispatch = () => {}\n) =>\n  Object.entries(config)\n    .map(\n      ([\n        key,\n        { permissions, url, apiName, apiVersion, localFile, ...rest },\n      ]) => {\n        const isVisible = permissions\n          ? calculatePermissions(permissions)\n          : true;\n        (async () => {\n          const schemaVisible = await Promise.resolve(isVisible);\n          if (schemaVisible) {\n            if (localFile) {\n              const newMapper = (await import(`../config/${localFile}`))\n                .default;\n              dispatch(getEmailSchema({ schema: newMapper, application: key }));\n            } else {\n              dispatch(\n                getEmailSchema({ application: key, url, apiName, apiVersion })\n              );\n            }\n          }\n        })();\n\n        return {\n          [key]: {\n            localFile,\n            isVisible,\n            url,\n            apiName,\n            apiVersion,\n            ...rest,\n          },\n        };\n      }\n    )\n    .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n\nexport const getSection = (\n  key,\n  schema = {},\n  storeSchema,\n  success = () => {}\n) => {\n  if (schema.isVisible === true) {\n    return {\n      label: schema?.title,\n      name: key,\n      fields: schema?.fields || getSchema(storeSchema),\n    };\n  } else {\n    Promise.resolve(schema.isVisible).then(success);\n\n    return {\n      label: <Skeleton />,\n      name: key,\n      fields: loaderField,\n    };\n  }\n};\n\nexport const concatApps = (apps = []) => {\n  return `${apps.slice(0, apps.length - (apps.length > 1)).join(', ')}${\n    apps.length >= 2 ? ` and ${apps[apps.length - 1]}` : ''\n  }`;\n};\n\nexport const distributeSuccessError = (promisses = []) => {\n  return Promise.allSettled(promisses.map(({ promise }) => promise)).then(\n    (apps) => {\n      return apps.reduce(\n        (acc, { value }, index) => ({\n          ...acc,\n          [value ? 'success' : 'error']: [\n            ...acc[value ? 'success' : 'error'],\n            promisses[index]?.meta?.title,\n          ],\n        }),\n        { success: [], error: [] }\n      );\n    }\n  );\n};\n\nexport const dispatchMessages = (\n  dispatch = () => undefined,\n  success = [],\n  error = []\n) => {\n  if (error.length !== 0 && success.length !== 0) {\n    dispatch(\n      addNotification({\n        dismissable: false,\n        variant: 'success',\n        title: `Email preferences for ${concatApps(\n          success\n        )} successfully saved`,\n      })\n    );\n\n    dispatch(\n      addNotification({\n        dismissable: false,\n        variant: 'danger',\n        title: `Email preferences for ${concatApps(\n          error\n        )} unsuccessfully saved`,\n      })\n    );\n  }\n\n  if (error.length === 0 && success.length !== 0) {\n    dispatch(\n      addNotification({\n        dismissable: false,\n        variant: 'success',\n        title: 'Preferences successfully saved',\n      })\n    );\n  }\n\n  if (error.length !== 0 && success.length === 0) {\n    dispatch(\n      addNotification({\n        dismissable: false,\n        variant: 'danger',\n        title: 'Preferences unsuccessfully saved',\n      })\n    );\n  }\n};\n","export const getNavFromURL = (history, fields, defaults) => {\n  const searchParams = new URLSearchParams(history?.location?.search);\n  const params = Object.fromEntries(searchParams);\n\n  if (\n    fields.some(\n      (bundle) =>\n        bundle.name === params.bundle &&\n        bundle.fields.some((app) => app.name === params.app)\n    )\n  ) {\n    return params;\n  } else {\n    if (defaults.bundle && defaults.app) {\n      searchParams.set('bundle', defaults.bundle);\n      searchParams.set('app', defaults.app);\n      history.replace({\n        pathname: history.location.pathname,\n        search: searchParams.toString(),\n      });\n    }\n    return { ...params, ...defaults };\n  }\n};\n\nexport const setNavToURL = (history, params) => {\n  let searchParams = new URLSearchParams(history?.location?.search);\n  Object.entries(params).forEach(([key, value]) => {\n    searchParams.set(key, value);\n  });\n\n  history.replace({\n    pathname: history.location.pathname,\n    search: searchParams.toString(),\n  });\n};\n","import React, { useMemo } from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  Divider,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Menu,\n  MenuContent,\n  MenuGroup,\n  MenuInput,\n  MenuItem,\n  MenuList,\n  TextInput,\n  Title,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getNavFromURL } from './urlSync';\n\nconst renderEmptyState = (setSearch) => (\n  <EmptyState variant={EmptyStateVariant.small} className=\"pf-u-mt-lg\">\n    <EmptyStateIcon icon={SearchIcon} />\n    <Title headingLevel=\"h4\" size=\"lg\">\n      No matching applications found\n    </Title>\n    <EmptyStateBody>Adjust you filters and try again.</EmptyStateBody>\n    <Button variant={ButtonVariant.link} onClick={() => setSearch('')}>\n      Clear filters\n    </Button>\n  </EmptyState>\n);\n\nconst TabsMenu = ({ searchRef, search, setSearch, fields, onClick }) => {\n  const history = useHistory();\n\n  const { bundle, app } = useMemo(\n    () => getNavFromURL(history, fields, {}),\n    [history?.location.search]\n  );\n\n  return (\n    <Menu isPlain isScrollable>\n      <MenuInput ref={searchRef} className=\"pf-u-mx-sm\">\n        <TextInput\n          aria-label=\"Filter menu items\"\n          placeholder=\"Search applications\"\n          iconVariant=\"search\"\n          type=\"search\"\n          onChange={(value) => setSearch(value)}\n          value={search}\n        />\n      </MenuInput>\n      <Divider />\n      <MenuContent id=\"notifications-menu-content\">\n        {fields.some((bundle) => bundle.fields.length > 0)\n          ? fields.map(({ fields, title: bundleLabel, name: bundleName }) =>\n              fields.length > 0 ? (\n                <MenuGroup\n                  label={bundleLabel}\n                  className=\"pf-u-px-sm\"\n                  key={`menu-group-${bundleName}`}\n                >\n                  <MenuList>\n                    {fields.map(\n                      ({ label: sectionLabel, name: sectionName }) => (\n                        <MenuItem\n                          onClick={(e) => onClick(e, bundleName, sectionName)}\n                          key={`menu-item-${bundleName}-${sectionName}`}\n                          isFocused={\n                            bundle === bundleName && app === sectionName\n                          }\n                        >\n                          {sectionLabel}\n                        </MenuItem>\n                      )\n                    )}\n                  </MenuList>\n                </MenuGroup>\n              ) : null\n            )\n          : renderEmptyState(setSearch)}\n      </MenuContent>\n    </Menu>\n  );\n};\n\nTabsMenu.propTypes = {\n  fields: PropTypes.array.isRequired,\n  search: PropTypes.string,\n  setSearch: PropTypes.func,\n  searchRef: PropTypes.object,\n  onClick: PropTypes.func,\n};\n\nexport default TabsMenu;\n","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormApi } from '@data-driven-forms/react-form-renderer';\nimport { Text, Title } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useFormState } from 'react-final-form';\nimport { getNavFromURL, setNavToURL } from './urlSync';\nimport TabsMenu from './TabsMenu';\n\nconst renderPageHeading = (bundleTitle, sectionTitle) => (\n  <React.Fragment>\n    <Title headingLevel=\"h3\" size=\"xl\" className=\"pf-u-pb-xs\">\n      {`${sectionTitle} | ${bundleTitle}`}\n    </Title>\n    <Text className=\"pf-u-mb-md\">\n      Configure your {sectionTitle} notifications.\n    </Text>\n  </React.Fragment>\n);\n\nconst FormTabs = ({ fields, titleRef, bundles }) => {\n  const history = useHistory();\n  const formOptions = useFormApi();\n  const searchRef = useRef(null);\n  const navConfig = useRef({});\n\n  const [search, setSearch] = useState('');\n  const [filteredFields, setFilteredFields] = useState(fields);\n  const { pristine, submitSucceeded, dirtyFieldsSinceLastSubmit } =\n    useFormState();\n\n  const handleResize = () => {\n    const container = document.getElementById('notifications-container');\n    const gridElement = document.getElementById('notifications-grid');\n    const menu = document.getElementById('notifications-menu-content');\n    if (menu?.style && gridElement?.style) {\n      const buttonsHeight =\n        document\n          .getElementById('user-pref__form-buttons')\n          ?.getBoundingClientRect()?.height || 0;\n      gridElement.style.height = `${\n        container.getBoundingClientRect().height - buttonsHeight\n      }px`;\n      const menuMaxHeight =\n        container.getBoundingClientRect().height -\n        titleRef.current.getBoundingClientRect().height -\n        searchRef.current.getBoundingClientRect().height -\n        (menuMaxHeight < menu.scrollHeight ? buttonsHeight : 0) -\n        1;\n      menu.style.maxHeight = `${menuMaxHeight}px`;\n      menu.style.height = `${menuMaxHeight - buttonsHeight}px`;\n    }\n  };\n\n  useEffect(() => {\n    if (window.screen.width > 768) {\n      window.addEventListener('resize', handleResize);\n      handleResize();\n    }\n\n    navConfig.current = getNavFromURL(history, fields, {\n      bundle: fields?.[0]?.name,\n      app: fields?.[0]?.fields?.[0]?.name,\n    });\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  useEffect(() => {\n    const filtered = fields.reduce(\n      (acc, bundle) => [\n        ...acc,\n        {\n          ...bundle,\n          fields: bundle.fields.filter((item) => {\n            const searchValue = search.toLowerCase();\n            return (\n              item.name?.toLowerCase().includes(searchValue) ||\n              item.title?.toLowerCase().includes(searchValue)\n            );\n          }, []),\n        },\n      ],\n      []\n    );\n    setFilteredFields(filtered);\n  }, [search]);\n\n  useEffect(() => {\n    handleResize();\n  }, [pristine, submitSucceeded, dirtyFieldsSinceLastSubmit]);\n\n  return (\n    <React.Fragment>\n      <div className=\"pref-notifications--nav\">\n        <TabsMenu\n          searchRef={searchRef}\n          search={search}\n          setSearch={setSearch}\n          fields={filteredFields}\n          onClick={(e, bundleName, sectionName) => {\n            e.preventDefault();\n            navConfig.current = {\n              bundle: bundleName,\n              app: sectionName,\n            };\n            setNavToURL(history, navConfig.current);\n          }}\n        />\n      </div>\n      <div className=\"pref-notifications--inputs\">\n        <React.Fragment>\n          {renderPageHeading(\n            bundles[navConfig.current.bundle]?.label,\n            fields\n              .reduce((acc, curr) => [...acc, ...curr.fields], [])\n              .filter(\n                (item) =>\n                  item.name === navConfig.current.app &&\n                  item.bundle === navConfig.current.bundle\n              )?.[0]?.label\n          )}\n          <div>\n            {formOptions.renderForm(\n              fields.reduce(\n                (acc, curr) => [\n                  ...acc,\n                  ...curr.fields.map((item) => ({\n                    ...item,\n                    key: `form-${item.bundle}-${item.name}`,\n                    fields: [\n                      item.fields.map((input) => ({\n                        ...input,\n                        hideField: !(\n                          item.name === navConfig.current.app &&\n                          item.bundle === navConfig.current.bundle\n                        ),\n                      })),\n                    ],\n                  })),\n                ],\n                []\n              ),\n              formOptions\n            )}\n          </div>\n        </React.Fragment>\n      </div>\n    </React.Fragment>\n  );\n};\n\nFormTabs.propTypes = {\n  fields: PropTypes.array.isRequired,\n  titleRef: PropTypes.any,\n  bundles: PropTypes.shape({ label: PropTypes.string }),\n};\n\nexport default React.memo(FormTabs);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormApi } from '@data-driven-forms/react-form-renderer';\n\nconst FormTabGroup = ({ fields }) => {\n  const formOptions = useFormApi();\n\n  return (\n    <div className=\"pf-c-form\">\n      {formOptions.renderForm(fields, formOptions)}\n    </div>\n  );\n};\n\nFormTabGroup.propTypes = {\n  fields: PropTypes.array.isRequired,\n};\n\nexport default FormTabGroup;\n","import omit from 'lodash/omit';\nimport {\n  BULK_SELECT_BUTTON,\n  INPUT_GROUP,\n  TAB_GROUP,\n} from '../../SmartComponents/FormComponents/componentTypes';\n\n// update bulk select button's state after every change\nconst afterChange = (formOptions, newValue, bundle, app) => {\n  if (!newValue) {\n    formOptions.change(\n      `bundles[${bundle}].applications[${app}].eventTypes[${BULK_SELECT_BUTTON}]`,\n      true\n    );\n  } else {\n    const allChecked = Object.entries(\n      formOptions.getState().values.bundles?.[bundle]?.applications?.[app]\n        .eventTypes || {}\n    ).every(([key, value]) => key === BULK_SELECT_BUTTON || value);\n    if (\n      allChecked &&\n      ((bundle !== 'rhel' && app !== 'advisor') ||\n        formOptions.getState().values['is_subscribed'])\n    ) {\n      formOptions.change(\n        `bundles[${bundle}].applications[${app}].eventTypes[${BULK_SELECT_BUTTON}]`,\n        false\n      );\n    }\n  }\n};\n\nexport const prepareFields = (notifPref, emailPref, emailConfig) =>\n  Object.entries(notifPref).reduce((acc, [bundleKey, bundleData]) => {\n    return [\n      ...acc,\n      {\n        title: bundleData?.label,\n        name: bundleKey,\n        fields: Object.entries(bundleData.applications).reduce(\n          (acc, [appKey, appData]) => {\n            let selectAllActive = true;\n            const fields = [\n              ...Object.entries(emailPref).reduce(\n                (acc, emailSection) => [\n                  ...acc,\n                  ...(emailSection[0] === appKey &&\n                  emailConfig[emailSection[0]]?.bundle === bundleKey\n                    ? [\n                        {\n                          label: 'Reports',\n                          name: 'email-reports',\n                          component: INPUT_GROUP,\n                          level: 1,\n                          fields: emailSection[1].schema[0]?.fields.map(\n                            (field) => {\n                              selectAllActive =\n                                selectAllActive && field.initialValue;\n                              return {\n                                ...omit(field, [\n                                  'infoMessage',\n                                  'checkedWarning',\n                                ]),\n                                afterChange: (formOptions, checked) =>\n                                  afterChange(\n                                    formOptions,\n                                    checked,\n                                    bundleKey,\n                                    appKey\n                                  ),\n                              };\n                            }\n                          ),\n                        },\n                      ] || []\n                    : []),\n                ],\n                []\n              ),\n              {\n                label: 'Event notifications',\n                description:\n                  'Select how would you like to receive notifications for each event.',\n                name: 'event-notifications',\n                component: INPUT_GROUP,\n                level: 1,\n                fields: [\n                  ...appData.eventTypes.map((eventType, idx) => ({\n                    label: eventType.label,\n                    name: `${eventType.name}-${idx}`,\n                    component: INPUT_GROUP,\n                    fields: eventType.fields.map((field) => {\n                      selectAllActive = selectAllActive && field.initialValue;\n                      return {\n                        ...omit(field, [\n                          'description',\n                          'infoMessage',\n                          'checkedWarning',\n                        ]),\n                        afterChange: (formOptions, checked) =>\n                          afterChange(formOptions, checked, bundleKey, appKey),\n                      };\n                    }),\n                  })),\n                ],\n              },\n            ];\n            return [\n              ...acc,\n              {\n                name: appKey,\n                bundle: bundleKey,\n                label: appData.label,\n                component: TAB_GROUP,\n                fields: [\n                  {\n                    name: `bundles[${bundleKey}].applications[${appKey}].eventTypes[${BULK_SELECT_BUTTON}]`,\n                    section: appKey,\n                    initialValue: !selectAllActive,\n                    component: BULK_SELECT_BUTTON,\n                    onClick: (formOptions, input) => {\n                      formOptions.batch(() => {\n                        formOptions.getRegisteredFields().forEach((field) => {\n                          if (\n                            ((field.includes(bundleKey) &&\n                              field.includes(appKey)) ||\n                              (field === 'is_subscribed' && // a temporary condition for RHEL Advisor email pref.\n                                bundleKey === 'rhel' &&\n                                appKey == 'advisor')) &&\n                            !field.includes(BULK_SELECT_BUTTON)\n                          ) {\n                            formOptions.change(field, input.value);\n                          }\n                        });\n                      });\n                      input.onChange(!input.value);\n                    },\n                  },\n                  ...fields,\n                ],\n              },\n            ];\n          },\n          []\n        ),\n      },\n    ];\n  }, []);\n","import React from 'react';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { isEmpty } from 'lodash';\nimport { ActionGroup } from '@patternfly/react-core';\nimport { FormSpy } from '@data-driven-forms/react-form-renderer';\nimport './form-buttons.scss';\n\nconst FormButtons = ({\n  dirtyFieldsSinceLastSubmit,\n  submitSucceeded,\n  pristine,\n}) => {\n  const { reset } = useFormApi();\n  const noChanges =\n    isEmpty(dirtyFieldsSinceLastSubmit) || (!submitSucceeded && pristine);\n  return noChanges ? null : (\n    <div\n      id=\"user-pref__form-buttons\"\n      className=\"pref-shared--buttons pf-m-9-col-on-md\"\n    >\n      <ActionGroup className=\"pref-shared--actions pf-u-px-lg pf-u-py-md\">\n        <Button\n          type=\"submit\"\n          ouiaId=\"user-pref__submit-button\"\n          isDisabled={noChanges}\n          variant=\"primary\"\n        >\n          Save\n        </Button>\n        <Button\n          variant=\"link\"\n          ouiaId=\"user-pref__reset-button\"\n          isDisabled={noChanges}\n          onClick={() => reset()}\n        >\n          Cancel\n        </Button>\n      </ActionGroup>\n    </div>\n  );\n};\n\nFormButtons.propTypes = {\n  dirtyFieldsSinceLastSubmit: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOfType([PropTypes.bool]),\n  }),\n  submitSucceeded: PropTypes.bool,\n  pristine: PropTypes.bool,\n};\n\nconst FormButtonWithSpies = (formProps) => (\n  <FormSpy\n    subscription={{\n      pristine: true,\n      submitSucceeded: true,\n      dirtyFieldsSinceLastSubmit: true,\n    }}\n  >\n    {(props) => <FormButtons {...props} {...formProps} />}\n  </FormSpy>\n);\n\nexport default FormButtonWithSpies;\n","import React from 'react';\nimport { useFormApi } from '@data-driven-forms/react-form-renderer';\nimport PropTypes from 'prop-types';\nimport FormButtons from '../shared/FormButtons';\n\nconst NotificationsTemplate = ({ schema, formFields }) => {\n  const { handleSubmit } = useFormApi();\n\n  return (\n    <form onSubmit={handleSubmit} style={{ display: 'contents' }}>\n      {schema.title}\n      {formFields}\n      <FormButtons />\n    </form>\n  );\n};\n\nNotificationsTemplate.propTypes = {\n  schema: PropTypes.shape({\n    title: PropTypes.node,\n  }),\n  formFields: PropTypes.array,\n};\n\nexport default NotificationsTemplate;\n","import React, { useEffect, useRef, useState } from 'react';\nimport omit from 'lodash/omit';\nimport { FormRenderer } from '@data-driven-forms/react-form-renderer';\nimport { componentMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { Bullseye, Spinner, Text } from '@patternfly/react-core';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getNotificationsSchema,\n  saveNotificationValues,\n} from '../../redux/actions/notifications-actions';\nimport { saveEmailValues } from '../../redux/actions/email-actions';\nimport { calculateEmailConfig } from '../../Utilities/functions';\nimport {\n  BULK_SELECT_BUTTON,\n  BulkSelectButton,\n  DATA_LIST,\n  DESCRIPTIVE_CHECKBOX,\n  DataListLayout,\n  DescriptiveCheckbox,\n  FORM_TABS,\n  INPUT_GROUP,\n  InputGroup,\n  LOADER,\n  Loader,\n  TAB_GROUP,\n} from '../../SmartComponents/FormComponents';\nimport config from '../../config/config.json';\nimport FormTabs from './Tabs';\nimport FormTabGroup from './TabGroup';\nimport { prepareFields } from './utils';\nimport FormTemplate from './NotificationTemplate';\nimport './notifications.scss';\n\nconst Notifications = () => {\n  const { auth } = useChrome();\n  const dispatch = useDispatch();\n  const titleRef = useRef(null);\n  const [emailConfig, setEmailConfig] = useState({});\n\n  const emailPref = useSelector(({ emailReducer }) => emailReducer);\n  const { bundles: notifPref, loaded } = useSelector(\n    ({ notificationsReducer }) => ({\n      ...notificationsReducer,\n      bundles: Object.entries(notificationsReducer?.bundles || {})?.reduce(\n        (acc, [key, value]) => ({\n          ...acc,\n          ...(config['notification-preference'].includes(key)\n            ? { [key]: value }\n            : {}),\n        }),\n        {}\n      ),\n    })\n  );\n\n  useEffect(() => {\n    (async () => {\n      await auth.getUser();\n      setEmailConfig(calculateEmailConfig(config, dispatch));\n      dispatch(getNotificationsSchema());\n    })();\n  }, []);\n\n  const saveValues = (values, formApi) => {\n    const notificationValues = {\n      bundles: Object.entries(values.bundles).reduce(\n        (acc, [bundleName, bundleData]) => ({\n          ...acc,\n          [bundleName]: {\n            applications: Object.entries(bundleData.applications).reduce(\n              (acc, [appName, appData]) => ({\n                ...acc,\n                [appName]: {\n                  eventTypes: omit(appData.eventTypes, BULK_SELECT_BUTTON),\n                },\n              }),\n              {}\n            ),\n          },\n        }),\n        {}\n      ),\n    };\n    const promises = [dispatch(saveNotificationValues(notificationValues))];\n    // temporary submitting of RHEL Advisor email pref.\n    if (formApi.getState().dirtyFields['is_subscribed']) {\n      const { url, apiName } = emailConfig['advisor'];\n      const action = saveEmailValues({\n        application: 'advisor',\n        values: { is_subscribed: values.is_subscribed },\n        url,\n        apiName,\n      });\n      promises.push(dispatch(action));\n    }\n    Promise.all(promises)\n      .then(() => {\n        dispatch(\n          addNotification({\n            dismissable: true,\n            variant: 'success',\n            title: 'Notification preferences successfully saved',\n          })\n        );\n      })\n      .catch(() => {\n        dispatch(\n          addNotification({\n            dismissable: true,\n            variant: 'danger',\n            title: 'Notification preferences unsuccessfully saved',\n          })\n        );\n      });\n  };\n\n  return loaded && Object.values(emailPref).every((value) => value.loaded) ? (\n    <div id=\"notifications-container\" className=\"pref-notifications--container\">\n      <div className=\"pref-notifications--wrapper\">\n        <div id=\"notifications-grid\" className=\"pref-notifications--grid\">\n          <div ref={titleRef} className=\"pref-notifications--head\">\n            <PageHeaderTitle\n              className=\"pref-notifications--title sticky\"\n              title=\"My Notifications\"\n            />\n            <Text className=\"pref-notifications--subtitle\">\n              This service allows you to opt-in and out of receiving\n              notifications. Your Organization Administrator has configured\n              which notifications you can or can not receive in their{' '}\n              <a href={`/settings/notifications`}>Settings</a>.\n            </Text>\n          </div>\n\n          <FormRenderer\n            componentMapper={{\n              ...componentMapper,\n              [DESCRIPTIVE_CHECKBOX]: DescriptiveCheckbox,\n              [BULK_SELECT_BUTTON]: BulkSelectButton,\n              [LOADER]: Loader,\n              [DATA_LIST]: DataListLayout,\n              [INPUT_GROUP]: InputGroup,\n              [FORM_TABS]: FormTabs,\n              [TAB_GROUP]: FormTabGroup,\n            }}\n            FormTemplate={FormTemplate}\n            schema={{\n              fields: [\n                {\n                  component: FORM_TABS,\n                  name: 'notifTabs',\n                  titleRef,\n                  bundles: notifPref,\n                  fields: prepareFields(notifPref, emailPref, emailConfig),\n                },\n              ],\n            }}\n            onSubmit={saveValues}\n          />\n        </div>\n      </div>\n    </div>\n  ) : (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default Notifications;\n","var map = {\n\t\"./config.json\": [\n\t\t25091\n\t],\n\t\"./data/general.json\": [\n\t\t14298,\n\t\t298\n\t],\n\t\"./data/unsubscribe.json\": [\n\t\t17814,\n\t\t814\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 40118;\nmodule.exports = webpackAsyncContext;"],"names":["instance","response","config","data","JSON","parse","_e","getApplicationSchema","application","apiVersion","resourceType","url","getNotificationsSchema","saveValues","apiName","values","saveNotificationValues","type","ACTION_TYPES","payload","save","getEmailSchema","schema","meta","appName","notifications","rejected","variant","title","description","label","DescriptiveCheckbox","props","useFieldApi","checkedWarning","infoMessage","afterChange","input","onChange","checked","formOptions","useFormApi","Checkbox","isChecked","id","name","event","rest","className","InfoCircleIcon","ExclamationTriangleIcon","propTypes","FieldProvider","PropTypes","group","section","defaultProps","Loader","size","validate","FormSpyProvider","DataListRow","hasError","_error","info","this","setState","fieldsKey","fields","state","DataListItemRow","DataListItemCells","dataListCells","DataListCell","isFilled","key","renderForm","Component","DataListLayout","sections","DataList","map","actualFields","Array","isArray","length","DataListItem","fieldsToRender","BulkSelectButton","onClick","Button","value","InputGroup","level","FormGroup","Text","BULK_SELECT_BUTTON","INPUT_GROUP","FORM_TABS","TAB_GROUP","booleanFunctions","visibilityFunctions","insights","chrome","hasLoosePermissions","permissions","getUserPermissions","userPermissions","some","item","find","permission","Object","fromEntries","keys","methodName","calculateEmailConfig","dispatch","entries","localFile","isVisible","Promise","all","flat","method","args","then","visibility","every","Boolean","calculatePermissions","resolve","newMapper","reduce","acc","curr","getNavFromURL","history","defaults","searchParams","URLSearchParams","location","search","params","bundle","app","set","replace","pathname","toString","TabsMenu","searchRef","setSearch","useHistory","useMemo","Menu","isPlain","isScrollable","MenuInput","ref","TextInput","placeholder","iconVariant","Divider","MenuContent","bundleLabel","bundleName","MenuGroup","MenuList","sectionLabel","sectionName","MenuItem","e","isFocused","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","EmptyStateBody","ButtonVariant","renderEmptyState","FormTabs","bundleTitle","sectionTitle","titleRef","bundles","useRef","navConfig","useState","filteredFields","setFilteredFields","useFormState","pristine","submitSucceeded","dirtyFieldsSinceLastSubmit","handleResize","container","document","getElementById","gridElement","menu","style","buttonsHeight","getBoundingClientRect","height","menuMaxHeight","current","scrollHeight","maxHeight","useEffect","window","screen","width","addEventListener","removeEventListener","filtered","filter","searchValue","toLowerCase","includes","preventDefault","forEach","setNavToURL","hideField","React","FormTabGroup","newValue","getState","applications","eventTypes","change","prepareFields","notifPref","emailPref","emailConfig","bundleKey","bundleData","appKey","appData","selectAllActive","emailSection","component","field","initialValue","omit","eventType","idx","batch","getRegisteredFields","FormButtons","reset","noChanges","ActionGroup","ouiaId","isDisabled","formProps","subscription","NotificationsTemplate","formFields","handleSubmit","onSubmit","display","auth","useChrome","useDispatch","setEmailConfig","useSelector","emailReducer","notificationsReducer","loaded","getUser","getSchema","PageHeaderTitle","href","componentMapper","FormTemplate","formApi","notificationValues","promises","dirtyFields","action","saveEmailValues","is_subscribed","push","addNotification","dismissable","Bullseye","Spinner","webpackAsyncContext","req","__webpack_require__","o","Error","code","ids","slice","t","module","exports"],"sourceRoot":""}