{"version":3,"file":"js/528.9db907fc07b8f8646cda.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/Utilities/store.js","webpack:///./src/redux/action-types.js","webpack:///./src/redux/reducers/email-reducer.js","webpack:///./src/redux/reducers/notifications-reducer.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { Routes } from './Routes';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport './App.scss';\n\nconst App = (props) => {\n  const { auth, updateDocumentTitle } = useChrome();\n\n  updateDocumentTitle?.('User Preferences');\n\n  useEffect(() => {\n    (async () => {\n      const user = await auth.getUser();\n      if (!user) {\n        location.href = './';\n      }\n    })();\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { RegistryContext, registry } from './Utilities/store';\n\nconst UserReferences = () => (\n  <RegistryContext.Provider\n    value={{\n      getRegistry: () => registry,\n    }}\n  >\n    <Provider store={registry.getStore()}>\n      <Router basename={getBaseName(window.location.pathname)}>\n        <App />\n      </Router>\n    </Provider>\n  </RegistryContext.Provider>\n);\n\nexport default UserReferences;\n","import React, { Fragment, Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport pckg from '../package.json';\n\nconst Notifications = lazy(() =>\n  import(\n    /* webpackChunkName: \"Notifications\" */ './PresentationalComponents/Notifications/Notifications'\n  )\n);\n\nexport const Routes = () => (\n  <Suspense fallback={Fragment}>\n    <Switch>\n      <Route\n        path={pckg.routes.notifications}\n        component={Notifications}\n        rootClass=\"notifications\"\n      />\n      <Redirect path=\"*\" to={pckg.routes.notifications} push />\n    </Switch>\n  </Suspense>\n);\n","import { createContext } from 'react';\nimport ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport reduxLogger from 'redux-logger';\nimport emailReducer, {\n  emailInitialState,\n} from '../redux/reducers/email-reducer';\nimport notificationsReducer, {\n  notificationsInitialState,\n} from '../redux/reducers/notifications-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst middlewares = [\n  promiseMiddleware,\n  notificationsMiddleware({\n    errorTitleKey: ['statusText', 'message', 'errors[0].status'],\n    errorDescriptionKey: ['errors[0].detail', 'errors', 'stack'],\n  }),\n  reduxLogger,\n].filter((middleware) => typeof middleware === 'function');\n\nexport const registry = new ReducerRegistry({}, middlewares);\n\nregistry.register({\n  emailReducer: applyReducerHash(emailReducer, emailInitialState),\n  notificationsReducer: applyReducerHash(\n    notificationsReducer,\n    notificationsInitialState\n  ),\n  notifications,\n});\n\nexport default registry;\n","export const GET_EMAIL_SCHEMA = '@@EMAIL/GET_SCHEMA';\nexport const SAVE_EMAIL_SCHEMA = '@@EMAIL/SAVE_VALUES';\n\nexport const GET_NOTIFICATIONS_SCHEMA = '@@NOTIFICATION/GET_SCHEMA';\nexport const SAVE_NOTIFICATION_SCHEMA = '@@NOTIFICATION/SAVE_VALUES';\n\nexport const ACTION_TYPES = ['_PENDING', '_FULFILLED', '_REJECTED'].reduce(\n  (acc, curr) => ({\n    ...acc,\n    ...{\n      [`${GET_EMAIL_SCHEMA}${curr}`]: GET_EMAIL_SCHEMA,\n      [`${SAVE_EMAIL_SCHEMA}${curr}`]: SAVE_EMAIL_SCHEMA,\n      [`${GET_NOTIFICATIONS_SCHEMA}${curr}`]: GET_NOTIFICATIONS_SCHEMA,\n      [`${SAVE_NOTIFICATION_SCHEMA}${curr}`]: SAVE_NOTIFICATION_SCHEMA,\n    },\n  }),\n  {\n    GET_EMAIL_SCHEMA,\n    SAVE_EMAIL_SCHEMA,\n    GET_NOTIFICATIONS_SCHEMA,\n    SAVE_NOTIFICATION_SCHEMA,\n  }\n);\n","import { GET_EMAIL_SCHEMA } from '../action-types';\nimport config from '../../config/config.json';\n\nexport const emailInitialState = Object.keys(config['email-preference']).reduce(\n  (acc, curr) => ({\n    ...acc,\n    [curr]: { loaded: false },\n  }),\n  {}\n);\n\nexport const setLoadingState = (store, { meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: [],\n      loaded: false,\n    },\n  };\n};\n\nexport const setSchema = (store, { payload, meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: payload || [],\n      loaded: true,\n    },\n  };\n};\n\nexport default {\n  [GET_EMAIL_SCHEMA]: setSchema,\n  [`${GET_EMAIL_SCHEMA}_FULFILLED`]: setSchema,\n  [`${GET_EMAIL_SCHEMA}_PENDING`]: setLoadingState,\n  [`${GET_EMAIL_SCHEMA}_REJECTED`]: (state, { payload, ...action }) =>\n    setSchema(state, action),\n};\n","import { GET_NOTIFICATIONS_SCHEMA } from '../action-types';\n\nexport const notificationsInitialState = {};\n\nexport const setLoadingState = (store) => {\n  return {\n    ...store,\n    loaded: false,\n  };\n};\n\nexport const setSchema = (store, { payload, meta }) => ({\n  ...store,\n  bundles: payload?.bundles || {},\n  meta,\n  loaded: true,\n});\n\nexport default {\n  [GET_NOTIFICATIONS_SCHEMA]: setSchema,\n  [`${GET_NOTIFICATIONS_SCHEMA}_FULFILLED`]: setSchema,\n  [`${GET_NOTIFICATIONS_SCHEMA}_PENDING`]: setLoadingState,\n  [`${GET_NOTIFICATIONS_SCHEMA}_REJECTED`]: (state, { payload, ...action }) =>\n    setSchema(state, action),\n};\n"],"names":["props","useChrome","auth","updateDocumentTitle","useEffect","getUser","location","href","Fragment","childProps","value","getRegistry","registry","store","basename","getBaseName","window","pathname","Notifications","lazy","Routes","Suspense","fallback","Switch","Route","path","pckg","component","rootClass","Redirect","to","push","RegistryContext","createContext","middlewares","promiseMiddleware","notificationsMiddleware","errorTitleKey","errorDescriptionKey","reduxLogger","filter","middleware","ReducerRegistry","register","emailReducer","applyReducerHash","emailInitialState","notificationsReducer","notificationsInitialState","notifications","GET_EMAIL_SCHEMA","SAVE_EMAIL_SCHEMA","GET_NOTIFICATIONS_SCHEMA","SAVE_NOTIFICATION_SCHEMA","ACTION_TYPES","reduce","acc","curr","Object","keys","config","loaded","setSchema","payload","meta","appName","schema","state","action","bundles"],"sourceRoot":""}