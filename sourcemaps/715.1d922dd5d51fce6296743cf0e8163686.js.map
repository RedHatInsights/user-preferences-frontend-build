{"version":3,"file":"js/715.1662470946654.c30a53902fbb8bdcec6a.js","mappings":"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","sources":["webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/constants.js","webpack:///./src/store/email-preferences.js","webpack:///./src/store/notification-preferences.js","webpack:///./src/store/index.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport { register } from './store';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport './App.scss';\nimport config from './config/config.json';\n\nconst App = (props) => {\n  const history = useHistory();\n  useEffect(() => {\n    (async () => {\n      const user = await insights.chrome.auth.getUser();\n      if (!user) {\n        location.href = './';\n      }\n    })();\n\n    register({ notifications: notificationsReducer });\n    insights.chrome.init();\n    insights.chrome.identifyApp('email');\n\n    const appNav = insights.chrome.on('APP_NAVIGATION', (event) => {\n      const subNavItems = Object.keys(config?.['notification-preference']);\n      history.push(\n        `${subNavItems.includes(event.navId) ? '/notifications' : ''}/${\n          event.navId\n        }`\n      );\n    });\n    return () => appNav();\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport PropTypes from 'prop-types';\n\nconst UserReferences = ({ logger }) => (\n  <Provider store={init(logger).getStore()}>\n    <Router basename={getBaseName(window.location.pathname, 1)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nUserReferences.propTypes = {\n  logger: PropTypes.func,\n};\n\nexport default UserReferences;\n","import React, { Fragment, Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport pckg from '../package.json';\n\nconst Email = lazy(() =>\n  import(\n    /* webpackChunkName: \"Email\" */ './PresentationalComponents/Email/Email'\n  )\n);\n\nconst Notification = lazy(() =>\n  import(\n    /* webpackChunkName: \"Notification\" */ './PresentationalComponents/Notification/Notification'\n  )\n);\n\nexport const Routes = () => (\n  <Suspense fallback={Fragment}>\n    <Switch>\n      <Route path={pckg.routes.email} component={Email} rootClass=\"email\" />\n      <Route\n        path={pckg.routes.notification}\n        component={Notification}\n        rootClass=\"notification\"\n      />\n      <Redirect path=\"*\" to={pckg.routes.email} push />\n    </Switch>\n  </Suspense>\n);\n","export const GET_EMAIL_SCHEMA = '@@EMAIL/GET_SCHEMA';\nexport const SAVE_EMAIL_SCHEMA = '@@EMAIL/SAVE_VALUES';\n\nexport const GET_NOTIFICATION_SCHEMA = '@@NOTIFICATION/GET_SCHEMA';\nexport const SAVE_NOTIFICATION_SCHEMA = '@@NOTIFICATION/SAVE_VALUES';\n\nexport const ACTION_TYPES = ['_PENDING', '_FULFILLED', '_REJECTED'].reduce(\n  (acc, curr) => ({\n    ...acc,\n    ...{\n      [`${GET_EMAIL_SCHEMA}${curr}`]: GET_EMAIL_SCHEMA,\n      [`${SAVE_EMAIL_SCHEMA}${curr}`]: SAVE_EMAIL_SCHEMA,\n      [`${GET_NOTIFICATION_SCHEMA}${curr}`]: GET_NOTIFICATION_SCHEMA,\n      [`${SAVE_NOTIFICATION_SCHEMA}${curr}`]: SAVE_NOTIFICATION_SCHEMA,\n    },\n  }),\n  {\n    GET_EMAIL_SCHEMA,\n    SAVE_EMAIL_SCHEMA,\n    GET_NOTIFICATION_SCHEMA,\n    SAVE_NOTIFICATION_SCHEMA,\n  }\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { ACTION_TYPES } from '../constants';\n\nconst defaultState = {};\n\nexport const loading = (store, { meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: [],\n      loaded: false,\n    },\n  };\n};\n\nexport const getSchema = (store, { payload, meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: payload || [],\n      loaded: true,\n    },\n  };\n};\n\nexport default {\n  emailPreferences: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_EMAIL_SCHEMA]: getSchema,\n      [`${ACTION_TYPES.GET_EMAIL_SCHEMA}_FULFILLED`]: getSchema,\n      [`${ACTION_TYPES.GET_EMAIL_SCHEMA}_PENDING`]: loading,\n      // eslint-disable-next-line no-unused-vars\n      [`${ACTION_TYPES.GET_EMAIL_SCHEMA}_REJECTED`]: (\n        state,\n        { payload, ...action }\n      ) => getSchema(state, action),\n    },\n    defaultState\n  ),\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { ACTION_TYPES } from '../constants';\n\nconst defaultState = {};\n\nexport const loading = (store, { meta }) => {\n  return {\n    ...store,\n    bundleName: meta.bundleName,\n    schema: {},\n    loaded: false,\n  };\n};\n\nexport const getSchema = (store, { payload, meta }) => {\n  return {\n    ...store,\n    bundleName: meta.bundleName,\n    schema: payload || {},\n    loaded: true,\n  };\n};\n\nexport default {\n  notificationPreferences: applyReducerHash(\n    {\n      [ACTION_TYPES.GET_NOTIFICATION_SCHEMA]: getSchema,\n      [`${ACTION_TYPES.GET_NOTIFICATION_SCHEMA}_FULFILLED`]: getSchema,\n      [`${ACTION_TYPES.GET_NOTIFICATION_SCHEMA}_PENDING`]: loading,\n      // eslint-disable-next-line no-unused-vars\n      [`${ACTION_TYPES.GET_NOTIFICATION_SCHEMA}_REJECTED`]: (\n        state,\n        { payload, ...action }\n      ) => getSchema(state, action),\n    },\n    defaultState\n  ),\n};\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nexport { default as emailPreferences } from './email-preferences';\nexport { default as notificationPreferences } from './notification-preferences';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (!registry) {\n    registry = new ReducerRegistry({}, [\n      promiseMiddleware,\n      notificationsMiddleware({ autoDismiss: true }),\n      ...middleware.filter((item) => typeof item !== 'undefined'),\n    ]);\n  }\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"names":["props","history","useHistory","useEffect","insights","chrome","auth","getUser","location","href","register","notifications","notificationsReducer","init","identifyApp","appNav","on","event","subNavItems","Object","keys","config","push","includes","navId","Fragment","childProps","UserReferences","logger","store","getStore","basename","getBaseName","window","pathname","propTypes","PropTypes","Email","lazy","Notification","Routes","Suspense","fallback","Switch","Route","path","pckg","component","rootClass","Redirect","to","GET_EMAIL_SCHEMA","SAVE_EMAIL_SCHEMA","GET_NOTIFICATION_SCHEMA","SAVE_NOTIFICATION_SCHEMA","ACTION_TYPES","reduce","acc","curr","getSchema","payload","meta","appName","schema","loaded","emailPreferences","applyReducerHash","state","action","bundleName","notificationPreferences","registry","middleware","ReducerRegistry","promiseMiddleware","notificationsMiddleware","autoDismiss","filter","item"],"sourceRoot":""}