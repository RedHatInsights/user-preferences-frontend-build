{"version":3,"file":"js/Email.1669819444636.2d9c1b7e6e4dbe833637.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/pficon-sort-common-asc-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/pficon-sort-common-desc-icon.js","webpack:///./node_modules/@data-driven-forms/pf4-component-mapper/esm/dual-list-sort-button/dual-list-sort-button.js","webpack:///./src/PresentationalComponents/shared/useLoaded.js","webpack:///./src/PresentationalComponents/shared/YourInformation.js","webpack:///./src/PresentationalComponents/shared/useCurrentUser.js","webpack:///./src/PresentationalComponents/Email/Email.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const PficonSortCommonAscIconConfig = {\n  name: 'PficonSortCommonAscIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M256,768 L256,16 C256,7.2 248.9,0 240,0 L143.6,0 C134.8,0 128,7.2 128,16 L128,768 L17.1,767.8 C6.8,767.8 0,774.5 0,785.2 C0,791.1 1.2,792.2 3.7,795.3 L179.9,1019.3 C183,1022.3 187.4,1024 192,1024 C196.6,1024 200.6,1022.2 203.7,1019.3 L380.3,795.5 C389.1,784.3 381.1,768 366.9,768 L256,768 Z M528,768 C517.9,768 512,760.8 512,751.8 L512,656.2 C512,647.3 520.2,640 530.3,640 L1005.7,640 C1015.8,640 1024,647.2 1024,656.2 L1024,751.8 C1024,760.7 1015.8,768 1005.7,768 L528,768 Z M530.3,512 C520.1,512 512,503.8 512,493.7 L512,402.8 C512,392.7 520.2,384.5 530.3,384.5 L879.6,384.5 C889.7,384.5 897.9,392.7 897.9,402.8 L897.9,493.7 C897.9,503.8 889.7,512 879.6,512 L530.3,512 L530.3,512 Z M533,256 C521.3,256 512,247.9 512,238 L512,146 C512,136.1 521.4,128 533,128 L747,128 C758.6,128 768,136.1 768,146 L768,238 C768,247.9 758.6,256 747,256 L533,256 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PficonSortCommonAscIcon = createIcon(PficonSortCommonAscIconConfig);\n\nexport default PficonSortCommonAscIcon;","import { createIcon } from '../createIcon';\n\nexport const PficonSortCommonDescIconConfig = {\n  name: 'PficonSortCommonDescIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M256,768 L256,16 C256,7.2 248.9,0 240,0 L143.6,0 C134.8,0 128,7.2 128,16 L128,768 L17.1,767.8 C6.8,767.8 0,774.5 0,785.2 C0,791.1 1.2,792.2 3.7,795.3 L179.9,1019.3 C183,1022.3 187.4,1024 192,1024 C196.6,1024 200.6,1022.2 203.7,1019.3 L380.3,795.5 C389.1,784.3 381.1,768 366.9,768 L256,768 Z M528,128 L1005.7,128 C1015.8,128 1024,135.3 1024,144.2 L1024,239.8 C1024,248.8 1015.8,256 1005.7,256 L530.3,256 C520.2,256 512,248.7 512,239.8 L512,144.2 C512,135.2 517.9,128 528,128 L528,128 Z M530.3,384 L879.6,384 C889.7,384 897.9,392.2 897.9,402.3 L897.9,493.2 C897.9,503.3 889.7,511.5 879.6,511.5 L530.3,511.5 C520.2,511.5 512,503.3 512,493.2 L512,402.3 C512,392.2 520.1,384 530.3,384 L530.3,384 Z M533,640 L747,640 C758.6,640 768,648.1 768,658 L768,750 C768,759.9 758.6,768 747,768 L533,768 C521.4,768 512,759.9 512,750 L512,658 C512,648.1 521.3,640 533,640 L533,640 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PficonSortCommonDescIcon = createIcon(PficonSortCommonDescIconConfig);\n\nexport default PficonSortCommonDescIcon;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"position\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from \"@patternfly/react-core/dist/esm/components/Button/Button.js\";\nimport { ButtonVariant } from \"@patternfly/react-core/dist/esm/components/Button/Button.js\";\nimport PficonSortCommonAscIcon from \"@patternfly/react-icons/dist/esm/icons/pficon-sort-common-asc-icon\";\nimport PficonSortCommonDescIcon from \"@patternfly/react-icons/dist/esm/icons/pficon-sort-common-desc-icon\";\nimport DualListContext from '../dual-list-context';\n\nvar DualListSortButton = function DualListSortButton(_ref) {\n  var position = _ref.position,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useContext = useContext(DualListContext),\n      sortConfig = _useContext.sortConfig,\n      setSortConfig = _useContext.setSortConfig;\n\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    variant: ButtonVariant.plain,\n    onClick: sortConfig[position] === 'asc' ? function () {\n      return setSortConfig(_objectSpread(_objectSpread({}, sortConfig), {}, _defineProperty({}, position, 'desc')));\n    } : function () {\n      return setSortConfig(_objectSpread(_objectSpread({}, sortConfig), {}, _defineProperty({}, position, 'asc')));\n    },\n    \"aria-label\": \"Sort\"\n  }, rest), sortConfig[position] === 'asc' ? /*#__PURE__*/React.createElement(PficonSortCommonAscIcon, null) : /*#__PURE__*/React.createElement(PficonSortCommonDescIcon, null));\n};\n\nDualListSortButton.propTypes = {\n  position: PropTypes.oneOf(['left', 'right'])\n};\nexport default DualListSortButton;","import { useEffect, useState } from 'react';\n\nconst useLoaded = (loader) => {\n  const [isLoaded, setLoaded] = useState(false);\n  useEffect(() => {\n    (async () => {\n      await loader();\n      setLoaded(true);\n    })();\n  }, []);\n\n  return isLoaded;\n};\n\nexport default useLoaded;\n","import {\n  Card,\n  CardBody,\n  CardHeader,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React, { Fragment } from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport useCurrentUser from './useCurrentUser';\n\nconst YourInformation = () => {\n  const env = insights.chrome.getEnvironment();\n  const prefix = insights.chrome.isProd ? '' : `${env === 'ci' ? 'qa' : env}.`;\n\n  const { isLoaded, currentUser } = useCurrentUser();\n\n  return (\n    <Card className=\"pref-email__info\" ouiaId=\"user-pref-info-card\">\n      <CardHeader>\n        <TextContent>\n          <Text component={TextVariants.h2}>Your information</Text>\n        </TextContent>\n      </CardHeader>\n      <CardBody>\n        <DataList>\n          <DataListItem>\n            <DataListItemRow>\n              <DataListItemCells\n                className=\"pref-u-condensed\"\n                dataListCells={[\n                  <DataListCell\n                    isFilled={false}\n                    className=\"pref-c-title pref-u-bold pref-u-condensed\"\n                    key=\"email-title\"\n                  >\n                    Email address\n                  </DataListCell>,\n                  <DataListCell\n                    isFilled\n                    key=\"email-value\"\n                    className=\"pref-email__info-user-email pref-u-condensed\"\n                  >\n                    {isLoaded ? (\n                      <Fragment>\n                        <span className=\"pf-u-mr-md\">{currentUser.email}</span>\n                        <a\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                          href={`https://www.${prefix}redhat.com/wapps/ugc/protected/emailChange.html`}\n                        >\n                          Not correct?\n                        </a>\n                      </Fragment>\n                    ) : (\n                      <Skeleton size=\"lg\" />\n                    )}\n                  </DataListCell>,\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        </DataList>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default YourInformation;\n","import { useState } from 'react';\nimport useLoaded from './useLoaded';\n\nconst useCurrentUser = () => {\n  const [currentUser, setCurrentUser] = useState({});\n\n  const isLoaded = useLoaded(async () => {\n    const { identity } = await insights.chrome.auth.getUser();\n    setCurrentUser(identity.user);\n  });\n\n  return {\n    isLoaded,\n    currentUser,\n  };\n};\n\nexport default useCurrentUser;\n","import React, { useState } from 'react';\nimport './email.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormTemplate,\n  componentMapper,\n} from '@data-driven-forms/pf4-component-mapper';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Bullseye,\n  Card,\n  CardBody,\n  CardHeader,\n  Spinner,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport FormRender from '@data-driven-forms/react-form-renderer/form-renderer';\nimport {\n  DATA_LIST,\n  DESCRIPTIVE_CHECKBOX,\n  DataListLayout,\n  DescriptiveCheckbox,\n  LOADER,\n  Loader,\n} from '../../SmartComponents/FormComponents';\nimport config from '../../config/config.json';\nimport { saveEmailValues } from '../../actions';\nimport {\n  calculateEmailConfig,\n  dispatchMessages,\n  distributeSuccessError,\n  getSection,\n} from '../../Utilities/functions';\nimport FormButtons from '../shared/FormButtons';\nimport YourInformation from '../shared/YourInformation';\nimport useLoaded from '../shared/useLoaded';\nimport { emailPreferences, register } from '../../store';\n\nconst Email = () => {\n  const dispatch = useDispatch();\n\n  const [emailConfig, setEmailConfig] = useState({});\n  const isLoaded = useLoaded(async () => {\n    await insights.chrome.auth.getUser();\n    register(emailPreferences);\n    setEmailConfig(await calculateEmailConfig(config, dispatch));\n  });\n\n  const store = useSelector(({ emailPreferences }) => emailPreferences);\n\n  const saveValues = async ({ unsubscribe, ...values }) => {\n    const promises = Object.entries(emailConfig)\n      .filter(([, { isVisible }]) => isVisible === true)\n      .map(([application, { localFile, schema, url, apiName }]) => {\n        if (\n          !localFile &&\n          !schema &&\n          store?.[application]?.schema &&\n          Object.keys(store?.[application]?.schema).length > 0\n        ) {\n          const action = saveEmailValues({ application, values, url, apiName });\n          dispatch(action);\n\n          return {\n            promise: action.payload,\n            meta: action.meta,\n          };\n        }\n      })\n      .filter(Boolean);\n\n    const { success, error } = await distributeSuccessError(promises);\n    dispatchMessages(dispatch, success, error);\n  };\n\n  const calculateSection = (key, schema) => {\n    return getSection(key, schema, store?.[key], (isVisible) => {\n      const { ...config } = emailConfig;\n      if (isVisible === false) {\n        delete config[key];\n      } else {\n        config[key] = {\n          ...config[key],\n          isVisible,\n        };\n      }\n\n      setEmailConfig(config);\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle title=\"Email preferences\" />\n      </PageHeader>\n      <Main className=\"pref-email\">\n        <Stack hasGutter>\n          <StackItem>\n            <YourInformation />\n          </StackItem>\n          <StackItem>\n            <Card ouiaId=\"user-pref-email-subscriptions-card\">\n              <CardHeader className=\"pf-u-pb-0\">\n                <TextContent>\n                  <Text component={TextVariants.h2}>Email subscriptions</Text>\n                  <Text component={TextVariants.p}>\n                    Select the emails you want to receive.\n                  </Text>\n                </TextContent>\n              </CardHeader>\n              <CardBody className=\"pref-email_form\">\n                {isLoaded ? (\n                  <FormRender\n                    componentMapper={{\n                      ...componentMapper,\n                      [DESCRIPTIVE_CHECKBOX]: DescriptiveCheckbox,\n                      [LOADER]: Loader,\n                      [DATA_LIST]: DataListLayout,\n                    }}\n                    FormTemplate={(props) => (\n                      <FormTemplate {...props} FormButtons={FormButtons} />\n                    )}\n                    schema={{\n                      fields: [\n                        {\n                          name: 'email-preferences',\n                          component: DATA_LIST,\n                          sections: Object.entries(emailConfig).map(\n                            ([key, schema]) => calculateSection(key, schema)\n                          ),\n                        },\n                      ],\n                    }}\n                    onSubmit={saveValues}\n                  />\n                ) : (\n                  <Bullseye>\n                    <Spinner />\n                  </Bullseye>\n                )}\n              </CardBody>\n            </Card>\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default Email;\n"],"names":["PficonSortCommonAscIconConfig","name","height","width","svgPath","yOffset","xOffset","PficonSortCommonAscIcon","PficonSortCommonDescIconConfig","PficonSortCommonDescIcon","loader","useState","isLoaded","setLoaded","useEffect","env","insights","chrome","getEnvironment","prefix","isProd","currentUser","setCurrentUser","useLoaded","auth","getUser","identity","user","useCurrentUser","Card","className","ouiaId","CardHeader","TextContent","Text","component","TextVariants","CardBody","DataList","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","isFilled","key","Fragment","email","rel","target","href","Skeleton","size","dispatch","useDispatch","emailConfig","setEmailConfig","register","emailPreferences","calculateEmailConfig","config","store","useSelector","saveValues","unsubscribe","values","promises","Object","entries","filter","isVisible","map","application","localFile","schema","url","apiName","keys","length","action","saveEmailValues","promise","payload","meta","Boolean","distributeSuccessError","success","error","dispatchMessages","PageHeader","PageHeaderTitle","title","Main","Stack","hasGutter","StackItem","componentMapper","DESCRIPTIVE_CHECKBOX","DescriptiveCheckbox","LOADER","Loader","DATA_LIST","DataListLayout","FormTemplate","props","FormButtons","fields","sections","getSection","onSubmit","Bullseye","Spinner"],"sourceRoot":""}