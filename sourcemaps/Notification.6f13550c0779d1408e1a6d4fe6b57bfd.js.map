{"version":3,"file":"js/Notification.1656361673130.5dfeee9eff6a6b5a85c3.js","mappings":"uhCA2KA,QApIqB,WAAM,QACjBA,GAAeC,EAAAA,EAAAA,aAAfD,WACFE,GAAaC,EAAAA,EAAAA,MACbC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KACZ,qBAAGC,2BAECC,EAAkB,WAAGC,EAAAA,EAAAA,IAA4BV,UAA/B,aAAG,EAAyCW,OAEpEC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAASL,EAAAA,MACR,KAEHI,EAAAA,EAAAA,YAAU,YACR,iBAAC,8FACOE,SAASC,OAAOC,KAAKC,UAD5B,OAEKjB,GACFI,GAASc,EAAAA,EAAAA,IAAsB,CAAElB,WAAAA,KAHpC,0CAAD,KAMC,CAACA,IAEJ,OAA6BmB,EAAAA,EAAAA,UAAQ,WACnC,GAAIb,MAAAA,GAAAA,EAAOc,OAAQ,CACjB,IAAMC,EAAS,EAAH,GAAQf,EAAMe,QAW1B,OAVIA,EAAOC,QACTD,EAAOC,QAAP,OAAoBD,EAAOC,QAC3BD,EAAOC,OAAO,GAAGC,UAAjB,OAAgCF,EAAOC,OAAO,GAAGC,UACjDF,EAAOC,OAAO,GAAGC,SAASC,KAAK,CAC7BF,OAAQG,KAGVJ,EAAOC,OAAS,GAGX,CACLI,UAAU,EACVL,OAAQA,GAGZ,MAAO,CACLK,UAAU,EACVL,OAAQ,MAET,CAACf,IAtBIoB,EAAR,EAAQA,SAAUL,EAAlB,EAAkBA,OAwBZM,GAAaC,EAAAA,EAAAA,aAAW,mCAC5B,gGAASH,YAAgBI,GAAzB,YACQC,GAASC,EAAAA,EAAAA,IAAuB,CAAE/B,WAAAA,EAAY6B,OAAAA,IACpDzB,EAAS0B,GAFX,kBAIUA,EAAOE,QAJjB,OAKI5B,GACE6B,EAAAA,EAAAA,IAAgB,CACdC,aAAa,EACbC,QAAS,UACTxB,MAAO,iDATf,gDAaIP,GACE6B,EAAAA,EAAAA,IAAgB,CACdC,aAAa,EACbC,QAAS,SACTxB,MAAO,mDAjBf,yDAD4B,sDAuB5B,CAACX,IAGH,OACE,kBAAC,aAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAAoC,MAAD,KACE,kBAAC,EAAAC,UAAD,CAAWC,UAAQ,GACjB,kBAAC,IAAD,CACEC,UAAU,oBACV5B,MAAK,6BAAwBF,KAE/B,kBAAC,EAAA+B,UAAD,oLAG0D,IACxD,uBACEC,QAAS,SAACC,GAAD,OACPxC,EAAWwC,EAAD,kCAA+B1C,KAE3C2C,KAAI,kCAA6B3C,IAJnC,YAJF,QAiBN,kBAAC,IAAD,CAAMuC,UAAU,qBACd,kBAAC,EAAAK,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAL,UAAD,KACE,kBAAC,EAAAM,KAAD,CAAMC,OAAO,6CACX,kBAAC,EAAAC,WAAD,CAAYT,UAAU,cACtB,kBAAC,EAAAU,SAAD,CAAUV,UAAU,0BACjBb,EACC,kBAAC,IAAD,CACEwB,gBAAe,OACVA,EAAAA,IADU,mBAEZC,EAAAA,GAAuBC,EAAAA,KAFX,SAGZC,EAAAA,GAASC,EAAAA,KAHG,SAIZC,EAAAA,GAAYC,EAAAA,IAJA,IAMfC,aAAc,SAACC,GAAD,OACZ,kBAAC,MAAD,UAAkBA,EAAlB,CAAyBC,YAAaA,EAAAA,MAExCtC,OAAQA,EACRuC,SAAUjC,IAGZ,kBAAC,EAAAkC,SAAD,KACE,kBAAC,EAAAC,QAAD,e","sources":["webpack:///./src/PresentationalComponents/Notification/Notification.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo } from 'react';\nimport './notification.scss';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { useParams } from 'react-router-dom';\nimport {\n  Bullseye,\n  Card,\n  CardBody,\n  CardHeader,\n  Spinner,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { useChromePush } from '../../Utilities/functions';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport {\n  DATA_LIST,\n  DESCRIPTIVE_CHECKBOX,\n  DataListLayout,\n  DescriptiveCheckbox,\n  LOADER,\n  Loader,\n} from '../../SmartComponents/FormComponents';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport FormButtons from '../shared/FormButtons';\nimport FormRender from '@data-driven-forms/react-form-renderer/form-renderer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getNotificationSchema, saveNotificationValues } from '../../actions';\nimport { notificationConfigForBundle } from '../../Utilities/functions';\nimport { notificationPreferences, register } from '../../store';\nimport unsubscribe from '../../config/data/unsubscribe.json';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst Notification = () => {\n  const { bundleName } = useParams();\n  const navigateTo = useChromePush();\n  const dispatch = useDispatch();\n  const store = useSelector(\n    ({ notificationPreferences }) => notificationPreferences\n  );\n  const bundleDisplayTitle = notificationConfigForBundle(bundleName)?.title;\n\n  useEffect(() => {\n    register(notificationPreferences);\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      await insights.chrome.auth.getUser();\n      if (bundleName) {\n        dispatch(getNotificationSchema({ bundleName }));\n      }\n    })();\n  }, [bundleName]);\n\n  const { isLoaded, schema } = useMemo(() => {\n    if (store?.loaded) {\n      const schema = { ...store.schema };\n      if (schema.fields) {\n        schema.fields = [...schema.fields];\n        schema.fields[0].sections = [...schema.fields[0].sections];\n        schema.fields[0].sections.push({\n          fields: unsubscribe,\n        });\n      } else {\n        schema.fields = [];\n      }\n\n      return {\n        isLoaded: true,\n        schema: schema,\n      };\n    }\n    return {\n      isLoaded: false,\n      schema: [],\n    };\n  }, [store]);\n\n  const saveValues = useCallback(\n    async ({ unsubscribe, ...values }) => {\n      const action = saveNotificationValues({ bundleName, values });\n      dispatch(action);\n      try {\n        await action.payload;\n        dispatch(\n          addNotification({\n            dismissable: false,\n            variant: 'success',\n            title: `Notification preferences successfully saved`,\n          })\n        );\n      } catch (e) {\n        dispatch(\n          addNotification({\n            dismissable: false,\n            variant: 'danger',\n            title: `Notification preferences unsuccessfully saved`,\n          })\n        );\n      }\n    },\n    [bundleName]\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Split>\n          <SplitItem isFilled>\n            <PageHeaderTitle\n              className=\"notif-page-header\"\n              title={`My Notifications | ${bundleDisplayTitle}`}\n            />\n            <StackItem>\n              This service allows you to opt-in and out of receiving\n              notifications. Your Organization Administrator has configured\n              which notifications you can or can not receive in their{' '}\n              <a\n                onClick={(e) =>\n                  navigateTo(e, `/settings/notifications/${bundleName}`)\n                }\n                href={`/settings/notifications/${bundleName}`}\n              >\n                Settings\n              </a>\n              .\n            </StackItem>\n          </SplitItem>\n        </Split>\n      </PageHeader>\n      <Main className=\"pref-notification\">\n        <Stack hasGutter>\n          <StackItem>\n            <Card ouiaId=\"user-pref-notification-subscriptions-card\">\n              <CardHeader className=\"pf-u-pb-0\"></CardHeader>\n              <CardBody className=\"pref-notification_form\">\n                {isLoaded ? (\n                  <FormRender\n                    componentMapper={{\n                      ...componentMapper,\n                      [DESCRIPTIVE_CHECKBOX]: DescriptiveCheckbox,\n                      [LOADER]: Loader,\n                      [DATA_LIST]: DataListLayout,\n                    }}\n                    FormTemplate={(props) => (\n                      <FormTemplate {...props} FormButtons={FormButtons} />\n                    )}\n                    schema={schema}\n                    onSubmit={saveValues}\n                  />\n                ) : (\n                  <Bullseye>\n                    <Spinner />\n                  </Bullseye>\n                )}\n              </CardBody>\n            </Card>\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default Notification;\n"],"names":["bundleName","useParams","navigateTo","useChromePush","dispatch","useDispatch","store","useSelector","notificationPreferences","bundleDisplayTitle","notificationConfigForBundle","title","useEffect","register","insights","chrome","auth","getUser","getNotificationSchema","useMemo","loaded","schema","fields","sections","push","unsubscribe","isLoaded","saveValues","useCallback","values","action","saveNotificationValues","payload","addNotification","dismissable","variant","Split","SplitItem","isFilled","className","StackItem","onClick","e","href","Stack","hasGutter","Card","ouiaId","CardHeader","CardBody","componentMapper","DESCRIPTIVE_CHECKBOX","DescriptiveCheckbox","LOADER","Loader","DATA_LIST","DataListLayout","FormTemplate","props","FormButtons","onSubmit","Bullseye","Spinner"],"sourceRoot":""}