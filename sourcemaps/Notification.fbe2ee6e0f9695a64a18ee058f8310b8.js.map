{"version":3,"file":"js/Notification.d496cce6ab2eb78e30b8.js","mappings":"wgCA0JA,QApHqB,WAAM,MACjBA,GAAeC,EAAAA,EAAAA,aAAfD,WACFE,GAAWC,EAAAA,EAAAA,eACXC,GAAQC,EAAAA,EAAAA,cACZ,qBAAGC,4BAGLC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAASF,EAAAA,MACR,KAEHC,EAAAA,EAAAA,YAAU,YACR,iBAAC,8FACOE,SAASC,OAAOC,KAAKC,UAD5B,OAEKZ,GACFE,GAASW,EAAAA,EAAAA,IAAsB,CAAEb,WAAAA,KAHpC,0CAAD,KAMC,CAACA,IAEJ,OAA6Bc,EAAAA,EAAAA,UAAQ,WACnC,GAAIV,MAAAA,GAAAA,EAAOW,OAAQ,CACjB,IAAMC,EAAS,EAAH,GAAQZ,EAAMY,QAW1B,OAVIA,EAAOC,QACTD,EAAOC,QAAP,OAAoBD,EAAOC,QAC3BD,EAAOC,OAAO,GAAGC,UAAjB,OAAgCF,EAAOC,OAAO,GAAGC,UACjDF,EAAOC,OAAO,GAAGC,SAASC,KAAK,CAC7BF,OAAQG,KAGVJ,EAAOC,OAAS,GAGX,CACLI,UAAU,EACVL,OAAQA,GAGZ,MAAO,CACLK,UAAU,EACVL,OAAQ,MAET,CAACZ,IAtBIiB,EAAR,EAAQA,SAAUL,EAAlB,EAAkBA,OAwBZM,GAAaC,EAAAA,EAAAA,aAAW,mCAC5B,gGAASH,YAAgBI,GAAzB,YACQC,GAASC,EAAAA,EAAAA,IAAuB,CAAE1B,WAAAA,EAAYwB,OAAAA,IACpDtB,EAASuB,GAFX,kBAIUA,EAAOE,QAJjB,OAKIzB,GACE0B,EAAAA,EAAAA,IAAgB,CACdC,aAAa,EACbC,QAAS,UACTC,MAAO,iDATf,gDAaI7B,GACE0B,EAAAA,EAAAA,IAAgB,CACdC,aAAa,EACbC,QAAS,SACTC,MAAO,mDAjBf,yDAD4B,sDAuB5B,CAAC/B,IAGH,OACE,kBAAC,aAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiB+B,MAAM,2BAEzB,kBAAC,IAAD,CAAMC,UAAU,qBACd,kBAAC,EAAAC,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,OAAO,6CACX,kBAAC,EAAAC,WAAD,CAAYN,UAAU,aACpB,kBAAC,EAAAO,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,EAAAA,aAAAA,IAAjB,iBACA,kBAAC,EAAAF,KAAD,CAAMC,UAAWC,EAAAA,aAAAA,GAAjB,mDAKJ,kBAAC,EAAAC,SAAD,CAAUX,UAAU,0BACjBX,EACC,kBAAC,IAAD,CACEuB,gBAAe,OACVA,EAAAA,IADU,mBAEZC,EAAAA,GAAuBC,EAAAA,KAFX,SAGZC,EAAAA,GAASC,EAAAA,KAHG,SAIZC,EAAAA,GAAYC,EAAAA,IAJA,IAMfC,aAAc,SAACC,GAAD,OACZ,kBAAC,MAAD,UAAkBA,EAAlB,CAAyBC,YAAaA,EAAAA,MAExCrC,OAAQA,EACRsC,SAAUhC,IAGZ,kBAAC,EAAAiC,SAAD,KACE,kBAAC,EAAAC,QAAD","sources":["webpack:///./src/PresentationalComponents/Notification/Notification.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo } from 'react';\nimport './notification.scss';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { useParams } from 'react-router-dom';\nimport {\n  Bullseye,\n  Card,\n  CardBody,\n  CardHeader,\n  Spinner,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport {\n  DATA_LIST,\n  DataListLayout,\n  DESCRIPTIVE_CHECKBOX,\n  DescriptiveCheckbox,\n  Loader,\n  LOADER,\n} from '../../SmartComponents/FormComponents';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport FormButtons from '../shared/FormButtons';\nimport FormRender from '@data-driven-forms/react-form-renderer/form-renderer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getNotificationSchema, saveNotificationValues } from '../../actions';\nimport { notificationPreferences, register } from '../../store';\nimport unsubscribe from '../../config/data/unsubscribe.json';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst Notification = () => {\n  const { bundleName } = useParams();\n  const dispatch = useDispatch();\n  const store = useSelector(\n    ({ notificationPreferences }) => notificationPreferences\n  );\n\n  useEffect(() => {\n    register(notificationPreferences);\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      await insights.chrome.auth.getUser();\n      if (bundleName) {\n        dispatch(getNotificationSchema({ bundleName }));\n      }\n    })();\n  }, [bundleName]);\n\n  const { isLoaded, schema } = useMemo(() => {\n    if (store?.loaded) {\n      const schema = { ...store.schema };\n      if (schema.fields) {\n        schema.fields = [...schema.fields];\n        schema.fields[0].sections = [...schema.fields[0].sections];\n        schema.fields[0].sections.push({\n          fields: unsubscribe,\n        });\n      } else {\n        schema.fields = [];\n      }\n\n      return {\n        isLoaded: true,\n        schema: schema,\n      };\n    }\n    return {\n      isLoaded: false,\n      schema: [],\n    };\n  }, [store]);\n\n  const saveValues = useCallback(\n    async ({ unsubscribe, ...values }) => {\n      const action = saveNotificationValues({ bundleName, values });\n      dispatch(action);\n      try {\n        await action.payload;\n        dispatch(\n          addNotification({\n            dismissable: false,\n            variant: 'success',\n            title: `Notification preferences successfully saved`,\n          })\n        );\n      } catch (e) {\n        dispatch(\n          addNotification({\n            dismissable: false,\n            variant: 'danger',\n            title: `Notification preferences unsuccessfully saved`,\n          })\n        );\n      }\n    },\n    [bundleName]\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle title=\"Notification Insights\" />\n      </PageHeader>\n      <Main className=\"pref-notification\">\n        <Stack hasGutter>\n          <StackItem>\n            <Card ouiaId=\"user-pref-notification-subscriptions-card\">\n              <CardHeader className=\"pf-u-pb-0\">\n                <TextContent>\n                  <Text component={TextVariants.h2}>Notifications</Text>\n                  <Text component={TextVariants.p}>\n                    Select the notifications you want to receive.\n                  </Text>\n                </TextContent>\n              </CardHeader>\n              <CardBody className=\"pref-notification_form\">\n                {isLoaded ? (\n                  <FormRender\n                    componentMapper={{\n                      ...componentMapper,\n                      [DESCRIPTIVE_CHECKBOX]: DescriptiveCheckbox,\n                      [LOADER]: Loader,\n                      [DATA_LIST]: DataListLayout,\n                    }}\n                    FormTemplate={(props) => (\n                      <FormTemplate {...props} FormButtons={FormButtons} />\n                    )}\n                    schema={schema}\n                    onSubmit={saveValues}\n                  />\n                ) : (\n                  <Bullseye>\n                    <Spinner />\n                  </Bullseye>\n                )}\n              </CardBody>\n            </Card>\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default Notification;\n"],"names":["bundleName","useParams","dispatch","useDispatch","store","useSelector","notificationPreferences","useEffect","register","insights","chrome","auth","getUser","getNotificationSchema","useMemo","loaded","schema","fields","sections","push","unsubscribe","isLoaded","saveValues","useCallback","values","action","saveNotificationValues","payload","addNotification","dismissable","variant","title","className","Stack","hasGutter","StackItem","Card","ouiaId","CardHeader","TextContent","Text","component","TextVariants","CardBody","componentMapper","DESCRIPTIVE_CHECKBOX","DescriptiveCheckbox","LOADER","Loader","DATA_LIST","DataListLayout","FormTemplate","props","FormButtons","onSubmit","Bullseye","Spinner"],"sourceRoot":""}