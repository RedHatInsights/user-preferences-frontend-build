{"version":3,"file":"js/Email.b94cdfd3958520368e8f.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/shared/useLoaded.js","webpack:///./src/PresentationalComponents/shared/YourInformation.js","webpack:///./src/PresentationalComponents/shared/useCurrentUser.js","webpack:///./src/PresentationalComponents/Email/Email.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useLoaded = (loader) => {\n  const [isLoaded, setLoaded] = useState(false);\n  useEffect(() => {\n    (async () => {\n      await loader();\n      setLoaded(true);\n    })();\n  }, []);\n\n  return isLoaded;\n};\n\nexport default useLoaded;\n","import {\n  Card,\n  CardBody,\n  CardHeader,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React, { Fragment } from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport useCurrentUser from './useCurrentUser';\n\nconst YourInformation = () => {\n  const env = insights.chrome.getEnvironment();\n  const prefix = insights.chrome.isProd ? '' : `${env === 'ci' ? 'qa' : env}.`;\n\n  const { isLoaded, currentUser } = useCurrentUser();\n\n  return (\n    <Card className=\"pref-email__info\" ouiaId=\"user-pref-info-card\">\n      <CardHeader>\n        <TextContent>\n          <Text component={TextVariants.h2}>Your information</Text>\n        </TextContent>\n      </CardHeader>\n      <CardBody>\n        <DataList>\n          <DataListItem>\n            <DataListItemRow>\n              <DataListItemCells\n                className=\"pref-u-condensed\"\n                dataListCells={[\n                  <DataListCell\n                    isFilled={false}\n                    className=\"pref-c-title pref-u-bold pref-u-condensed\"\n                    key=\"email-title\"\n                  >\n                    Email address\n                  </DataListCell>,\n                  <DataListCell\n                    isFilled\n                    key=\"email-value\"\n                    className=\"pref-email__info-user-email pref-u-condensed\"\n                  >\n                    {isLoaded ? (\n                      <Fragment>\n                        <span className=\"pf-u-mr-md\">{currentUser.email}</span>\n                        <a\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                          href={`https://www.${prefix}redhat.com/wapps/ugc/protected/emailChange.html`}\n                        >\n                          Not correct?\n                        </a>\n                      </Fragment>\n                    ) : (\n                      <Skeleton size=\"lg\" />\n                    )}\n                  </DataListCell>,\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        </DataList>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default YourInformation;\n","import { useState } from 'react';\nimport useLoaded from './useLoaded';\n\nconst useCurrentUser = () => {\n  const [currentUser, setCurrentUser] = useState({});\n\n  const isLoaded = useLoaded(async () => {\n    const { identity } = await insights.chrome.auth.getUser();\n    setCurrentUser(identity.user);\n  });\n\n  return {\n    isLoaded,\n    currentUser,\n  };\n};\n\nexport default useCurrentUser;\n","import React, { useState } from 'react';\nimport './email.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  componentMapper,\n  FormTemplate,\n} from '@data-driven-forms/pf4-component-mapper';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Card,\n  CardBody,\n  Stack,\n  StackItem,\n  CardHeader,\n  TextContent,\n  Text,\n  TextVariants,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport FormRender from '@data-driven-forms/react-form-renderer/form-renderer';\nimport {\n  DESCRIPTIVE_CHECKBOX,\n  DATA_LIST,\n  LOADER,\n  DescriptiveCheckbox,\n  DataListLayout,\n  Loader,\n} from '../../SmartComponents/FormComponents';\nimport config from '../../config/config.json';\nimport { saveEmailValues } from '../../actions';\nimport {\n  calculateEmailConfig,\n  getSection,\n  distributeSuccessError,\n  dispatchMessages,\n} from '../../Utilities/functions';\nimport FormButtons from '../shared/FormButtons';\nimport YourInformation from '../shared/YourInformation';\nimport useLoaded from '../shared/useLoaded';\nimport { emailPreferences, register } from '../../store';\n\nconst Email = () => {\n  const dispatch = useDispatch();\n\n  const [emailConfig, setEmailConfig] = useState({});\n  const isLoaded = useLoaded(async () => {\n    await insights.chrome.auth.getUser();\n    register(emailPreferences);\n    setEmailConfig(await calculateEmailConfig(config, dispatch));\n  });\n\n  const store = useSelector(({ emailPreferences }) => emailPreferences);\n\n  const saveValues = async ({ unsubscribe, ...values }) => {\n    const promises = Object.entries(emailConfig)\n      .filter(([, { isVisible }]) => isVisible === true)\n      .map(([application, { localFile, schema, url, apiName }]) => {\n        if (\n          !localFile &&\n          !schema &&\n          store?.[application]?.schema &&\n          Object.keys(store?.[application]?.schema).length > 0\n        ) {\n          const action = saveEmailValues({ application, values, url, apiName });\n          dispatch(action);\n\n          return {\n            promise: action.payload,\n            meta: action.meta,\n          };\n        }\n      })\n      .filter(Boolean);\n\n    const { success, error } = await distributeSuccessError(promises);\n    dispatchMessages(dispatch, success, error);\n  };\n\n  const calculateSection = (key, schema) => {\n    return getSection(key, schema, store?.[key], (isVisible) => {\n      const { ...config } = emailConfig;\n      if (isVisible === false) {\n        delete config[key];\n      } else {\n        config[key] = {\n          ...config[key],\n          isVisible,\n        };\n      }\n\n      setEmailConfig(config);\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <PageHeaderTitle title=\"Email preferences\" />\n      </PageHeader>\n      <Main className=\"pref-email\">\n        <Stack hasGutter>\n          <StackItem>\n            <YourInformation />\n          </StackItem>\n          <StackItem>\n            <Card ouiaId=\"user-pref-email-subscriptions-card\">\n              <CardHeader className=\"pf-u-pb-0\">\n                <TextContent>\n                  <Text component={TextVariants.h2}>Email subscriptions</Text>\n                  <Text component={TextVariants.p}>\n                    Select the emails you want to receive.\n                  </Text>\n                </TextContent>\n              </CardHeader>\n              <CardBody className=\"pref-email_form\">\n                {isLoaded ? (\n                  <FormRender\n                    componentMapper={{\n                      ...componentMapper,\n                      [DESCRIPTIVE_CHECKBOX]: DescriptiveCheckbox,\n                      [LOADER]: Loader,\n                      [DATA_LIST]: DataListLayout,\n                    }}\n                    FormTemplate={(props) => (\n                      <FormTemplate {...props} FormButtons={FormButtons} />\n                    )}\n                    schema={{\n                      fields: [\n                        {\n                          name: 'email-preferences',\n                          component: DATA_LIST,\n                          sections: Object.entries(emailConfig).map(\n                            ([key, schema]) => calculateSection(key, schema)\n                          ),\n                        },\n                      ],\n                    }}\n                    onSubmit={saveValues}\n                  />\n                ) : (\n                  <Bullseye>\n                    <Spinner />\n                  </Bullseye>\n                )}\n              </CardBody>\n            </Card>\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default Email;\n"],"names":["loader","useState","isLoaded","setLoaded","useEffect","env","insights","chrome","getEnvironment","prefix","isProd","currentUser","setCurrentUser","useLoaded","auth","getUser","identity","user","useCurrentUser","Card","className","ouiaId","CardHeader","TextContent","Text","component","TextVariants","CardBody","DataList","DataListItem","DataListItemRow","DataListItemCells","dataListCells","DataListCell","isFilled","key","Fragment","email","rel","target","href","Skeleton","size","dispatch","useDispatch","emailConfig","setEmailConfig","register","emailPreferences","calculateEmailConfig","config","store","useSelector","saveValues","unsubscribe","values","promises","Object","entries","filter","isVisible","map","application","localFile","schema","url","apiName","keys","length","action","saveEmailValues","promise","payload","meta","Boolean","distributeSuccessError","success","error","dispatchMessages","PageHeader","PageHeaderTitle","title","Main","Stack","hasGutter","StackItem","componentMapper","DESCRIPTIVE_CHECKBOX","DescriptiveCheckbox","LOADER","Loader","DATA_LIST","DataListLayout","FormTemplate","props","FormButtons","fields","name","sections","getSection","onSubmit","Bullseye","Spinner"],"sourceRoot":""}