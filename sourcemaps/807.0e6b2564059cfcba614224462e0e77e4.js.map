{"version":3,"file":"js/807.c7778de244c26c3df08e.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/shared/FormButtons.js","webpack:///./src/SmartComponents/FormComponents/DescriptiveCheckbox.js","webpack:///./src/SmartComponents/FormComponents/Loader.js","webpack:///./src/SmartComponents/FormComponents/DataListLayout.js","webpack:///./src/SmartComponents/FormComponents/componentTypes.js","webpack:///./src/api.js","webpack:///./src/actions.js"],"sourcesContent":["import React from 'react';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport FormSpy from '@data-driven-forms/react-form-renderer/form-spy';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { isEmpty } from 'lodash';\nimport { ActionGroup } from '@patternfly/react-core';\n\nconst FormButtons = ({\n  dirtyFieldsSinceLastSubmit,\n  submitSucceeded,\n  pristine,\n}) => {\n  const { reset } = useFormApi();\n  const noChanges =\n    isEmpty(dirtyFieldsSinceLastSubmit) || (!submitSucceeded && pristine);\n  return (\n    <ActionGroup>\n      <Button\n        className=\"pref-email__form-button\"\n        type=\"submit\"\n        ouiaId=\"user-pref-primary-button\"\n        isDisabled={noChanges}\n        variant=\"primary\"\n      >\n        Save\n      </Button>\n      <Button\n        variant=\"link\"\n        ouiaId=\"user-pref-reset-button\"\n        isDisabled={noChanges}\n        onClick={() => reset()}\n      >\n        Cancel\n      </Button>\n    </ActionGroup>\n  );\n};\n\nFormButtons.propTypes = {\n  dirtyFieldsSinceLastSubmit: PropTypes.arrayOf(\n    PropTypes.shape({\n      [PropTypes.string]: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.bool,\n      ]),\n    })\n  ),\n  submitSucceeded: PropTypes.bool,\n  pristine: PropTypes.bool,\n};\n\nconst FormButtonWithSpies = (formProps) => (\n  <FormSpy\n    subscription={{\n      pristine: true,\n      submitSucceeded: true,\n      dirtyFieldsSinceLastSubmit: true,\n    }}\n  >\n    {(props) => <FormButtons {...props} {...formProps} />}\n  </FormSpy>\n);\n\nexport default FormButtonWithSpies;\n","import React from 'react';\nimport { Checkbox } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport './descriptiveCheckbox.scss';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\n// eslint-disable-next-line no-unused-vars\nconst DescriptiveCheckbox = (props) => {\n  const {\n    label,\n    title,\n    description,\n    isDanger,\n    isGlobal,\n    checkedWarning,\n    input: { onChange, checked, ...input },\n  } = useFieldApi({\n    ...props,\n    type: 'checkbox',\n  });\n  const formOptions = useFormApi();\n\n  return (\n    <Checkbox\n      {...input}\n      isChecked={checked}\n      id={`descriptive-checkbox-${input.name}`}\n      onChange={(...props) => {\n        if (isGlobal) {\n          formOptions.batch(() => {\n            formOptions.getRegisteredFields().forEach((field) => {\n              if (typeof formOptions.getFieldState(field).value === 'boolean') {\n                formOptions.change(field, false);\n              }\n            });\n          });\n        } else {\n          formOptions.change('unsubscribe.from-all', false);\n        }\n\n        onChange(...props);\n      }}\n      data-type=\"descriptive-checkbox\"\n      className=\"pref-c-descriptive-checkbox\"\n      label={\n        <span\n          className={classNames('pref-c-checkbox-label', {\n            'pref-c-checkbox-label-error': isDanger || isGlobal,\n          })}\n        >\n          {label || title}\n        </span>\n      }\n      description={\n        <div>\n          {description && (\n            <span className=\"pref-c-checkbox-description\">{description}</span>\n          )}\n          {checked && checkedWarning && (\n            <span className=\"pref-c-checkbox-warning\">\n              <ExclamationTriangleIcon /> {checkedWarning}\n            </span>\n          )}\n        </div>\n      }\n    />\n  );\n};\n\nDescriptiveCheckbox.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  name: PropTypes.string,\n  label: PropTypes.string,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  isDanger: PropTypes.bool,\n  isGlobal: PropTypes.bool,\n};\n\nDescriptiveCheckbox.defaultProps = {\n  name: '',\n  label: '',\n  isDanger: false,\n};\n\nexport default DescriptiveCheckbox;\n","import React from 'react';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport PropTypes from 'prop-types';\n\nconst Loader = ({\n  name,\n  size,\n  FieldProvider,\n  validate,\n  FormSpyProvider,\n  formOptions,\n  ...rest\n}) => (\n  <div {...rest}>\n    <Skeleton size={size}></Skeleton>\n  </div>\n);\n\nLoader.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n  validate: PropTypes.any,\n  name: PropTypes.string,\n  size: PropTypes.string,\n};\n\nLoader.defaultProps = {\n  name: '',\n  size: 'md',\n};\n\nexport default Loader;\n","import React, { Component } from 'react';\nimport {\n  DataList,\n  DataListItem,\n  DataListItemRow,\n  DataListItemCells,\n  DataListCell,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nclass DataListRow extends Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch(_error, info) {\n    this.setState({ hasError: info });\n  }\n\n  render() {\n    const { fieldsKey, label, fields, formOptions } = this.props;\n    const { hasError } = this.state;\n    return (\n      <DataListItemRow>\n        <DataListItemCells\n          dataListCells={[\n            <DataListCell\n              isFilled={false}\n              className=\"pref-c-title pref-u-bold\"\n              key={`${fieldsKey}-title`}\n            >\n              {fieldsKey === 0 ? label : ''}\n            </DataListCell>,\n            <DataListCell isFilled key={`${fieldsKey}-content`}>\n              {hasError\n                ? 'Error while mapping fields, please check your schema if it has valid component types'\n                : formOptions?.renderForm(fields, formOptions)}\n            </DataListCell>,\n          ]}\n        />\n      </DataListItemRow>\n    );\n  }\n}\n\nDataListRow.propTypes = {\n  fieldsKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fields: PropTypes.array,\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  validate: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n};\n\n// eslint-disable-next-line no-unused-vars\nconst DataListLayout = (props) => {\n  const { sections, label, name } = useFieldApi(props);\n  const formOptions = useFormApi();\n  return (\n    <DataList aria-label={label || name} {...props}>\n      {sections.map(({ label, fields }, key) => {\n        const actualFields = Array.isArray(fields) ? fields : [fields];\n        return (\n          actualFields.length > 0 && (\n            <DataListItem name={name} key={key} aria-labelledby=\"simple-item1\">\n              {actualFields.map(({ fields: fieldsToRender }, fieldsKey) => (\n                <DataListRow\n                  key={`${key}-${fieldsKey}`}\n                  fieldsKey={fieldsKey}\n                  label={label}\n                  fields={fieldsToRender}\n                  formOptions={formOptions}\n                />\n              ))}\n            </DataListItem>\n          )\n        );\n      })}\n    </DataList>\n  );\n};\n\nDataListLayout.propTypes = {\n  sections: PropTypes.array,\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  label: PropTypes.node,\n  name: PropTypes.string,\n  validate: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n};\n\nexport default DataListLayout;\n","export const DESCRIPTIVE_CHECKBOX = 'descriptiveCheckbox';\nexport const LOADER = 'loader';\nexport const DATA_LIST = 'section';\n","import instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nexport { instance };\n\ninstance.interceptors.response.use((response) => {\n  if (response?.config?.data) {\n    try {\n      return JSON.parse(response.config.data);\n    } catch (_e) {\n      return response.config.data;\n    }\n  }\n\n  return response;\n});\n\nexport const getApplicationSchema = (\n  application,\n  apiVersion = 'v1',\n  resourceType = '',\n  url\n) =>\n  instance.get(\n    `/api/${application}/${apiVersion}${url || `/user-config/${resourceType}`}`\n  );\n\nexport const saveValues = async (\n  application,\n  values,\n  apiVersion = 'v1',\n  resourceType = '',\n  url\n) =>\n  instance.post(\n    `/api/${application}/${apiVersion}${url || `/user-config/${resourceType}`}`,\n    values\n  );\n","import { getApplicationSchema, saveValues as save } from './api';\nimport { ACTION_TYPES } from './constants';\nimport config from './config/config.json';\n\nconst notificationConfigForBundle = (bundleName) =>\n  config['notification-preference']?.[bundleName];\n\nexport const getNotificationSchema = ({ bundleName, apiVersion }) => ({\n  type: ACTION_TYPES.GET_NOTIFICATION_SCHEMA,\n  payload: getApplicationSchema(\n    notificationConfigForBundle(bundleName)?.application,\n    apiVersion,\n    notificationConfigForBundle(bundleName)?.resourceType\n  ),\n  meta: {\n    bundleName,\n    notifications: {\n      rejected: {\n        variant: 'danger',\n        title: \"Request for user's configuration failed\",\n        description: `User's configuration notification for this bundle does not exist.`,\n      },\n    },\n  },\n});\n\nexport const saveNotificationValues = ({ bundleName, values, apiVersion }) => ({\n  type: ACTION_TYPES.SAVE_NOTIFICATION_SCHEMA,\n  payload: save(\n    notificationConfigForBundle(bundleName)?.application,\n    values,\n    apiVersion,\n    notificationConfigForBundle(bundleName)?.resourceType\n  ),\n  meta: {\n    bundleName: bundleName,\n    noError: true,\n  },\n});\n\nexport const getEmailSchema = ({\n  application,\n  apiVersion,\n  resourceType = 'email-preference',\n  schema,\n  url,\n  apiName,\n}) => ({\n  type: ACTION_TYPES.GET_EMAIL_SCHEMA,\n  payload:\n    schema ||\n    getApplicationSchema(apiName || application, apiVersion, resourceType, url),\n  meta: {\n    appName: application,\n    notifications: {\n      rejected: {\n        variant: 'danger',\n        title: \"Request for user's configuration failed\",\n        description: `User's configuration email for ${config['email-preference']?.[application]?.title} application does not exist.`,\n      },\n    },\n  },\n});\n\nexport const saveEmailValues = ({\n  application,\n  values,\n  apiVersion,\n  resourceType = 'email-preference',\n  url,\n  apiName,\n}) => ({\n  type: ACTION_TYPES.SAVE_EMAIL_SCHEMA,\n  payload: save(apiName || application, values, apiVersion, resourceType, url),\n  meta: {\n    appName: application,\n    title: config['email-preference']?.[application]?.title,\n    noError: true,\n  },\n});\n"],"names":["FormButtons","dirtyFieldsSinceLastSubmit","submitSucceeded","pristine","reset","useFormApi","noChanges","ActionGroup","Button","className","type","ouiaId","isDisabled","variant","onClick","propTypes","PropTypes","formProps","subscription","props","DescriptiveCheckbox","useFieldApi","label","title","description","isDanger","isGlobal","checkedWarning","input","onChange","checked","formOptions","Checkbox","isChecked","id","name","batch","getRegisteredFields","forEach","field","getFieldState","value","change","classNames","ExclamationTriangleIcon","FieldProvider","defaultProps","Loader","size","rest","validate","FormSpyProvider","Skeleton","DataListRow","hasError","_error","info","this","setState","fieldsKey","fields","state","DataListItemRow","DataListItemCells","dataListCells","DataListCell","isFilled","key","renderForm","Component","DataListLayout","sections","DataList","map","actualFields","Array","isArray","length","DataListItem","fieldsToRender","DESCRIPTIVE_CHECKBOX","LOADER","DATA_LIST","instance","response","config","data","JSON","parse","_e","getApplicationSchema","application","apiVersion","resourceType","url","saveValues","values","notificationConfigForBundle","bundleName","getNotificationSchema","ACTION_TYPES","payload","meta","notifications","rejected","saveNotificationValues","save","noError","getEmailSchema","schema","apiName","appName","saveEmailValues"],"sourceRoot":""}