{"version":3,"file":"js/670.6e65f24fad09ba088a37.js","mappings":"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","sources":["webpack:///./src/Utilities/pathnames.js","webpack:///./src/Utilities/store.js","webpack:///./src/redux/action-types.js","webpack:///./src/redux/reducers/email-reducer.js","webpack:///./src/redux/reducers/notifications-reducer.js","webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/Routing.tsx"],"sourcesContent":["const pathnames = {\n  notifications: {\n    link: '/notifications',\n    route: 'notifications/*',\n  },\n};\n\nexport default pathnames;\n","import { createContext } from 'react';\nimport ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport reduxLogger from 'redux-logger';\nimport emailReducer, {\n  emailInitialState,\n} from '../redux/reducers/email-reducer';\nimport notificationsReducer, {\n  notificationsInitialState,\n} from '../redux/reducers/notifications-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst middlewares = [\n  promiseMiddleware,\n  notificationsMiddleware({\n    errorTitleKey: ['statusText', 'message', 'errors[0].status'],\n    errorDescriptionKey: ['errors[0].detail', 'errors', 'stack'],\n  }),\n  reduxLogger,\n].filter((middleware) => typeof middleware === 'function');\n\nexport const registry = new ReducerRegistry({}, middlewares);\n\nregistry.register({\n  emailReducer: applyReducerHash(emailReducer, emailInitialState),\n  notificationsReducer: applyReducerHash(\n    notificationsReducer,\n    notificationsInitialState\n  ),\n  notifications,\n});\n\nexport default registry;\n","export const GET_EMAIL_SCHEMA = '@@EMAIL/GET_SCHEMA';\nexport const SAVE_EMAIL_SCHEMA = '@@EMAIL/SAVE_VALUES';\n\nexport const GET_NOTIFICATIONS_SCHEMA = '@@NOTIFICATION/GET_SCHEMA';\nexport const SAVE_NOTIFICATION_SCHEMA = '@@NOTIFICATION/SAVE_VALUES';\n\nexport const ACTION_TYPES = ['_PENDING', '_FULFILLED', '_REJECTED'].reduce(\n  (acc, curr) => ({\n    ...acc,\n    ...{\n      [`${GET_EMAIL_SCHEMA}${curr}`]: GET_EMAIL_SCHEMA,\n      [`${SAVE_EMAIL_SCHEMA}${curr}`]: SAVE_EMAIL_SCHEMA,\n      [`${GET_NOTIFICATIONS_SCHEMA}${curr}`]: GET_NOTIFICATIONS_SCHEMA,\n      [`${SAVE_NOTIFICATION_SCHEMA}${curr}`]: SAVE_NOTIFICATION_SCHEMA,\n    },\n  }),\n  {\n    GET_EMAIL_SCHEMA,\n    SAVE_EMAIL_SCHEMA,\n    GET_NOTIFICATIONS_SCHEMA,\n    SAVE_NOTIFICATION_SCHEMA,\n  }\n);\n","import { GET_EMAIL_SCHEMA } from '../action-types';\nimport config from '../../config/config.json';\n\nexport const emailInitialState = Object.keys(config['email-preference']).reduce(\n  (acc, curr) => ({\n    ...acc,\n    [curr]: { loaded: false },\n  }),\n  {}\n);\n\nexport const setLoadingState = (store, { meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: [],\n      loaded: false,\n    },\n  };\n};\n\nexport const setSchema = (store, { payload, meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: payload || [],\n      loaded: true,\n    },\n  };\n};\n\nexport default {\n  [GET_EMAIL_SCHEMA]: setSchema,\n  [`${GET_EMAIL_SCHEMA}_FULFILLED`]: setSchema,\n  [`${GET_EMAIL_SCHEMA}_PENDING`]: setLoadingState,\n  [`${GET_EMAIL_SCHEMA}_REJECTED`]: (state, { payload, ...action }) =>\n    setSchema(state, action),\n};\n","import { GET_NOTIFICATIONS_SCHEMA } from '../action-types';\n\nexport const notificationsInitialState = {};\n\nexport const setLoadingState = (store) => {\n  return {\n    ...store,\n    loaded: false,\n  };\n};\n\nexport const setSchema = (store, { payload, meta }) => ({\n  ...store,\n  bundles: payload?.bundles || {},\n  meta,\n  loaded: true,\n});\n\nexport default {\n  [GET_NOTIFICATIONS_SCHEMA]: setSchema,\n  [`${GET_NOTIFICATIONS_SCHEMA}_FULFILLED`]: setSchema,\n  [`${GET_NOTIFICATIONS_SCHEMA}_PENDING`]: setLoadingState,\n  [`${GET_NOTIFICATIONS_SCHEMA}_REJECTED`]: (state, { payload, ...action }) =>\n    setSchema(state, action),\n};\n","import React, { Fragment, useEffect } from 'react';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport './App.scss';\nimport Routing from './Routing';\n\nconst App = () => {\n  const { auth, updateDocumentTitle } = useChrome();\n\n  updateDocumentTitle?.('User Preferences');\n\n  useEffect(() => {\n    (async () => {\n      const user = await auth.getUser();\n      if (!user) {\n        location.href = './';\n      }\n    })();\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routing />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { RegistryContext, registry } from './Utilities/store';\n\nconst UserReferences = () => (\n  <RegistryContext.Provider\n    value={{\n      getRegistry: () => registry,\n    }}\n  >\n    <Provider store={registry.getStore()}>\n      <Router basename={getBaseName(window.location.pathname)}>\n        <App />\n      </Router>\n    </Provider>\n  </RegistryContext.Provider>\n);\n\nexport default UserReferences;\n","import React, { Fragment, Suspense, lazy, useMemo } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport pathnames from './Utilities/pathnames';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components';\n\nconst Notifications = lazy(() => import('./PresentationalComponents/Notifications/Notifications'));\n\nconst routes = [\n  {\n    path: pathnames.notifications.route,\n    element: Notifications,\n  },\n];\n\ninterface RouteType {\n  path?: string;\n  element: React.ComponentType;\n  childRoutes?: RouteType[];\n  elementProps?: Record<string, unknown>;\n}\n\nconst renderRoutes = (routes: RouteType[] = []) =>\n  routes.map(({ path, element: Element, childRoutes, elementProps }) => (\n    <Route key={path} path={path} element={<Element {...elementProps} />}>\n      {renderRoutes(childRoutes)}\n    </Route>\n  ));\n\nexport const Routing = () => {\n  const renderedRoutes = useMemo(() => renderRoutes(routes), [routes]);\n  return (<Suspense fallback={Fragment}>\n    <Routes>\n      {renderedRoutes}\n      {/* Catch all unmatched routes */}\n      <Route path=\"*\" element={<InvalidObject />} />\n    </Routes>\n  </Suspense>\n)}\n\nexport default Routing;\n"],"names":["notifications","link","route","RegistryContext","createContext","getRegistry","middlewares","promiseMiddleware","notificationsMiddleware","errorTitleKey","errorDescriptionKey","reduxLogger","filter","middleware","registry","ReducerRegistry","register","emailReducer","applyReducerHash","emailInitialState","notificationsReducer","notificationsInitialState","GET_EMAIL_SCHEMA","SAVE_EMAIL_SCHEMA","GET_NOTIFICATIONS_SCHEMA","SAVE_NOTIFICATION_SCHEMA","ACTION_TYPES","reduce","acc","curr","Object","keys","config","loaded","setSchema","store","payload","meta","appName","schema","state","action","bundles","auth","updateDocumentTitle","useEffect","getUser","location","href","Fragment","value","basename","window","pathname","Notifications","lazy","routes","path","element","renderRoutes","map","Element","childRoutes","elementProps","Route","key","renderedRoutes","useMemo","Suspense","fallback","Routes","InvalidObject"],"sourceRoot":""}