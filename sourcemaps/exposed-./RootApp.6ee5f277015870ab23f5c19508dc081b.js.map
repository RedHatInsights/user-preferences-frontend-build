{"version":3,"file":"js/exposed-./RootApp.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/Routing.tsx","webpack:///./src/Utilities/pathnames.js","webpack:///./src/Utilities/store.js","webpack:///./src/redux/action-types.js","webpack:///./src/redux/reducers/email-reducer.js","webpack:///./src/redux/reducers/notifications-reducer.js"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport './App.scss';\nimport Routing from './Routing';\n\nconst App = () => {\n  const { auth, updateDocumentTitle } = useChrome();\n\n  updateDocumentTitle?.('Notification Preferences | Hybrid Cloud Console', true);\n\n  useEffect(() => {\n    (async () => {\n      const user = await auth.getUser();\n      if (!user) {\n        location.href = './';\n      }\n    })();\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routing />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { RegistryContext, registry } from './Utilities/store';\n\nconst UserReferences = () => (\n  <RegistryContext.Provider\n    value={{\n      getRegistry: () => registry,\n    }}\n  >\n    <Provider store={registry.getStore()}>\n      <App />\n    </Provider>\n  </RegistryContext.Provider>\n);\n\nexport default UserReferences;\n","import React, { Fragment, Suspense, lazy, useMemo } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport pathnames from './Utilities/pathnames';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components';\n\nconst Notifications = lazy(() => import('./PresentationalComponents/Notifications/Notifications'));\n\nconst routes = [\n  {\n    path: pathnames.notifications.route,\n    element: Notifications,\n  },\n];\n\ninterface RouteType {\n  path?: string;\n  element: React.ComponentType;\n  childRoutes?: RouteType[];\n  elementProps?: Record<string, unknown>;\n}\n\nconst renderRoutes = (routes: RouteType[] = []) =>\n  routes.map(({ path, element: Element, childRoutes, elementProps }) => (\n    <Route key={path} path={path} element={<Element {...elementProps} />}>\n      {renderRoutes(childRoutes)}\n    </Route>\n  ));\n\nexport const Routing = () => {\n  const renderedRoutes = useMemo(() => renderRoutes(routes), [routes]);\n  return (<Suspense fallback=\"\">\n    <Routes>\n      {renderedRoutes}\n      {/* Catch all unmatched routes */}\n      <Route path=\"*\" element={<Notifications />} />\n    </Routes>\n  </Suspense>\n)}\n\nexport default Routing;\n","const pathnames = {\n  notifications: {\n    link: '/notifications',\n    route: '/*',\n  },\n};\n\nexport default pathnames;\n","import { createContext } from 'react';\nimport ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport reduxLogger from 'redux-logger';\nimport emailReducer, {\n  emailInitialState,\n} from '../redux/reducers/email-reducer';\nimport notificationsReducer, {\n  notificationsInitialState,\n} from '../redux/reducers/notifications-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst middlewares = [\n  promiseMiddleware,\n  notificationsMiddleware({\n    errorTitleKey: ['statusText', 'message', 'errors[0].status'],\n    errorDescriptionKey: ['errors[0].detail', 'errors', 'stack'],\n  }),\n  reduxLogger,\n].filter((middleware) => typeof middleware === 'function');\n\nexport const registry = new ReducerRegistry({}, middlewares);\n\nregistry.register({\n  emailReducer: applyReducerHash(emailReducer, emailInitialState),\n  notificationsReducer: applyReducerHash(\n    notificationsReducer,\n    notificationsInitialState\n  ),\n  notifications,\n});\n\nexport default registry;\n","export const GET_EMAIL_SCHEMA = '@@EMAIL/GET_SCHEMA';\nexport const SAVE_EMAIL_SCHEMA = '@@EMAIL/SAVE_VALUES';\n\nexport const GET_NOTIFICATIONS_SCHEMA = '@@NOTIFICATION/GET_SCHEMA';\nexport const SAVE_NOTIFICATION_SCHEMA = '@@NOTIFICATION/SAVE_VALUES';\n\nexport const ACTION_TYPES = ['_PENDING', '_FULFILLED', '_REJECTED'].reduce(\n  (acc, curr) => ({\n    ...acc,\n    ...{\n      [`${GET_EMAIL_SCHEMA}${curr}`]: GET_EMAIL_SCHEMA,\n      [`${SAVE_EMAIL_SCHEMA}${curr}`]: SAVE_EMAIL_SCHEMA,\n      [`${GET_NOTIFICATIONS_SCHEMA}${curr}`]: GET_NOTIFICATIONS_SCHEMA,\n      [`${SAVE_NOTIFICATION_SCHEMA}${curr}`]: SAVE_NOTIFICATION_SCHEMA,\n    },\n  }),\n  {\n    GET_EMAIL_SCHEMA,\n    SAVE_EMAIL_SCHEMA,\n    GET_NOTIFICATIONS_SCHEMA,\n    SAVE_NOTIFICATION_SCHEMA,\n  }\n);\n","import { GET_EMAIL_SCHEMA } from '../action-types';\nimport config from '../../config/config.json';\n\nexport const emailInitialState = Object.keys(config['email-preference']).reduce(\n  (acc, curr) => ({\n    ...acc,\n    [curr]: { loaded: false },\n  }),\n  {}\n);\n\nexport const setLoadingState = (store, { meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: [],\n      loaded: false,\n    },\n  };\n};\n\nexport const setSchema = (store, { payload, meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: payload || [],\n      loaded: true,\n    },\n  };\n};\n\nexport default {\n  [GET_EMAIL_SCHEMA]: setSchema,\n  [`${GET_EMAIL_SCHEMA}_FULFILLED`]: setSchema,\n  [`${GET_EMAIL_SCHEMA}_PENDING`]: setLoadingState,\n  [`${GET_EMAIL_SCHEMA}_REJECTED`]: (state, { payload, ...action }) =>\n    setSchema(state, action),\n};\n","import { GET_NOTIFICATIONS_SCHEMA } from '../action-types';\n\nexport const notificationsInitialState = {};\n\nexport const setLoadingState = (store) => {\n  return {\n    ...store,\n    loaded: false,\n  };\n};\n\nexport const setSchema = (store, { payload, meta }) => ({\n  ...store,\n  bundles: payload?.bundles || {},\n  meta,\n  loaded: true,\n});\n\nexport default {\n  [GET_NOTIFICATIONS_SCHEMA]: setSchema,\n  [`${GET_NOTIFICATIONS_SCHEMA}_FULFILLED`]: setSchema,\n  [`${GET_NOTIFICATIONS_SCHEMA}_PENDING`]: setLoadingState,\n  [`${GET_NOTIFICATIONS_SCHEMA}_REJECTED`]: (state, { payload, ...action }) =>\n    setSchema(state, action),\n};\n"],"names":["auth","updateDocumentTitle","useEffect","getUser","location","href","Fragment","Provider","value","getRegistry","store","getStore","A","Notifications","lazy","routes","path","notifications","route","element","renderRoutes","map","Element","childRoutes","elementProps","Route","key","renderedRoutes","useMemo","Suspense","fallback","Routes","link","RegistryContext","createContext","middlewares","errorTitleKey","errorDescriptionKey","filter","middleware","registry","register","emailReducer","notificationsReducer","GET_EMAIL_SCHEMA","SAVE_EMAIL_SCHEMA","GET_NOTIFICATIONS_SCHEMA","SAVE_NOTIFICATION_SCHEMA","ACTION_TYPES","reduce","acc","curr","emailInitialState","Object","keys","loaded","setSchema","payload","meta","appName","schema","state","action","notificationsInitialState","bundles"],"sourceRoot":""}