{"version":3,"file":"js/31.42936ce3cdea410ec1a7.js","mappings":"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","sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/redux/reducers/email-reducer.js","webpack:///./src/redux/reducers/notifications-reducer.js","webpack:///./src/Utilities/store.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/redux/action-types.js"],"sourcesContent":["import React, { Fragment, Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport pckg from '../package.json';\n\nconst Notifications = lazy(() =>\n  import(\n    /* webpackChunkName: \"Notifications\" */ './PresentationalComponents/Notifications/Notifications'\n  )\n);\n\nexport const Routes = () => (\n  <Suspense fallback={Fragment}>\n    <Switch>\n      <Route\n        path={pckg.routes.notifications}\n        component={Notifications}\n        rootClass=\"notifications\"\n      />\n      <Redirect path=\"*\" to={pckg.routes.notifications} push />\n    </Switch>\n  </Suspense>\n);\n","import React, { Fragment, useEffect } from 'react';\nimport { Routes } from './Routes';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport './App.scss';\n\nconst App = (props) => {\n  const { auth, updateDocumentTitle } = useChrome();\n\n  updateDocumentTitle?.('User Preferences');\n\n  useEffect(() => {\n    (async () => {\n      const user = await auth.getUser();\n      if (!user) {\n        location.href = './';\n      }\n    })();\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { GET_EMAIL_SCHEMA } from '../action-types';\n\nexport const emailInitialState = {};\n\nexport const setLoadingState = (store, { meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: [],\n      loaded: false,\n    },\n  };\n};\n\nexport const setSchema = (store, { payload, meta }) => {\n  return {\n    ...store,\n    [meta.appName]: {\n      schema: payload || [],\n      loaded: true,\n    },\n  };\n};\n\nexport default {\n  [GET_EMAIL_SCHEMA]: setSchema,\n  [`${GET_EMAIL_SCHEMA}_FULFILLED`]: setSchema,\n  [`${GET_EMAIL_SCHEMA}_PENDING`]: setLoadingState,\n  [`${GET_EMAIL_SCHEMA}_REJECTED`]: (state, { payload, ...action }) =>\n    setSchema(state, action),\n};\n","import {\n  GET_NOTIFICATION_SCHEMA,\n  GET_NOTIFICATION_SCHEMAS,\n} from '../action-types';\n\nexport const notificationsInitialState = {};\n\nexport const setLoadingState = (store, { meta }) => {\n  return {\n    ...store,\n    bundleName: meta.bundleName,\n    schema: {},\n    loaded: false,\n  };\n};\n\nexport const setSchemas = (store, { payload }) => ({\n  ...store,\n  bundles: payload,\n});\n\nexport const setSchema = (store, { payload, meta }) => {\n  return {\n    ...store,\n    bundleName: meta.bundleName,\n    schema: payload || {},\n    loaded: true,\n  };\n};\n\nexport default {\n  [GET_NOTIFICATION_SCHEMAS]: setSchemas,\n  [GET_NOTIFICATION_SCHEMA]: setSchema,\n  [`${GET_NOTIFICATION_SCHEMA}_FULFILLED`]: setSchema,\n  [`${GET_NOTIFICATION_SCHEMA}_PENDING`]: setLoadingState,\n  [`${GET_NOTIFICATION_SCHEMA}_REJECTED`]: (state, { payload, ...action }) =>\n    setSchema(state, action),\n};\n","import { createContext } from 'react';\nimport ReducerRegistry, {\n  applyReducerHash,\n} from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport reduxLogger from 'redux-logger';\nimport emailReducer, {\n  emailInitialState,\n} from '../redux/reducers/email-reducer';\nimport notificationsReducer, {\n  notificationsInitialState,\n} from '../redux/reducers/notifications-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst middlewares = [\n  promiseMiddleware,\n  notificationsMiddleware({\n    errorTitleKey: ['statusText', 'message', 'errors[0].status'],\n    errorDescriptionKey: ['errors[0].detail', 'errors', 'stack'],\n  }),\n  reduxLogger,\n].filter((middleware) => typeof middleware === 'function');\n\nexport const registry = new ReducerRegistry({}, middlewares);\n\nregistry.register({\n  emailReducer: applyReducerHash(emailReducer, emailInitialState),\n  notificationsReducer: applyReducerHash(\n    notificationsReducer,\n    notificationsInitialState\n  ),\n  notifications,\n});\n\nexport default registry;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { RegistryContext, registry } from './Utilities/store';\n\nconst UserReferences = () => (\n  <RegistryContext.Provider\n    value={{\n      getRegistry: () => registry,\n    }}\n  >\n    <Provider store={registry.getStore()}>\n      <Router basename={getBaseName(window.location.pathname)}>\n        <App />\n      </Router>\n    </Provider>\n  </RegistryContext.Provider>\n);\n\nexport default UserReferences;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './AppEntry';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","export const GET_EMAIL_SCHEMA = '@@EMAIL/GET_SCHEMA';\nexport const SAVE_EMAIL_SCHEMA = '@@EMAIL/SAVE_VALUES';\n\nexport const GET_NOTIFICATION_SCHEMA = '@@NOTIFICATION/GET_SCHEMA';\nexport const GET_NOTIFICATION_SCHEMAS = '@@NOTIFICATION/GET_SCHEMAS';\nexport const SAVE_NOTIFICATION_SCHEMA = '@@NOTIFICATION/SAVE_VALUES';\n\nexport const ACTION_TYPES = ['_PENDING', '_FULFILLED', '_REJECTED'].reduce(\n  (acc, curr) => ({\n    ...acc,\n    ...{\n      [`${GET_EMAIL_SCHEMA}${curr}`]: GET_EMAIL_SCHEMA,\n      [`${SAVE_EMAIL_SCHEMA}${curr}`]: SAVE_EMAIL_SCHEMA,\n      [`${GET_NOTIFICATION_SCHEMA}${curr}`]: GET_NOTIFICATION_SCHEMA,\n      [`${SAVE_NOTIFICATION_SCHEMA}${curr}`]: SAVE_NOTIFICATION_SCHEMA,\n    },\n  }),\n  {\n    GET_EMAIL_SCHEMA,\n    SAVE_EMAIL_SCHEMA,\n    GET_NOTIFICATION_SCHEMA,\n    GET_NOTIFICATION_SCHEMAS,\n    SAVE_NOTIFICATION_SCHEMA,\n  }\n);\n"],"names":["Notifications","lazy","Routes","Suspense","fallback","Fragment","Switch","Route","path","pckg","component","rootClass","Redirect","to","push","props","useChrome","auth","updateDocumentTitle","useEffect","getUser","location","href","childProps","setSchema","store","payload","meta","appName","schema","loaded","GET_EMAIL_SCHEMA","state","action","bundleName","GET_NOTIFICATION_SCHEMAS","bundles","GET_NOTIFICATION_SCHEMA","RegistryContext","createContext","getRegistry","middlewares","promiseMiddleware","notificationsMiddleware","errorTitleKey","errorDescriptionKey","reduxLogger","filter","middleware","registry","ReducerRegistry","register","emailReducer","applyReducerHash","notificationsReducer","notifications","Provider","value","getStore","basename","getBaseName","window","pathname","ReactDOM","document","getElementById","SAVE_EMAIL_SCHEMA","SAVE_NOTIFICATION_SCHEMA","ACTION_TYPES","reduce","acc","curr"],"sourceRoot":""}